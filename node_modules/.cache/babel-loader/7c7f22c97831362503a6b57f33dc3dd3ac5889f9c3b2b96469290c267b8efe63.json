{"ast":null,"code":"import Empresa from \"../modelo/empresa\";\nimport Cliente from \"../modelo/cliente\";\nimport Produto from \"../modelo/produto\";\nimport Servico from \"../modelo/servico\";\nimport Pet from \"../modelo/pet\";\nimport CPF from \"../modelo/cpf\";\nclass EmpresaService {\n  constructor() {\n    this.empresa = void 0;\n    this.empresa = new Empresa();\n    this.cadastrarClienteComDados = this.cadastrarClienteComDados.bind(this);\n    this.atualizarCliente = this.atualizarCliente.bind(this);\n    this.excluirCliente = this.excluirCliente.bind(this);\n    this.cadastrarPet = this.cadastrarPet.bind(this);\n    this.atualizarPet = this.atualizarPet.bind(this);\n    this.excluirPet = this.excluirPet.bind(this);\n    this.cadastrarProduto = this.cadastrarProduto.bind(this);\n    this.atualizarProduto = this.atualizarProduto.bind(this);\n    this.excluirProduto = this.excluirProduto.bind(this);\n    this.cadastrarServico = this.cadastrarServico.bind(this);\n    this.atualizarServico = this.atualizarServico.bind(this);\n    this.excluirServico = this.excluirServico.bind(this);\n    this.registrarConsumo = this.registrarConsumo.bind(this);\n    this.getRelatorioTop10ClientesPorQuantidade = this.getRelatorioTop10ClientesPorQuantidade.bind(this);\n    this.getRelatorioTop5ClientesPorValor = this.getRelatorioTop5ClientesPorValor.bind(this);\n    this.getRelatorioProdutosServicosMaisConsumidos = this.getRelatorioProdutosServicosMaisConsumidos.bind(this);\n    this.getRelatorioConsumoPorTipoRaca = this.getRelatorioConsumoPorTipoRaca.bind(this);\n    this.getRelatorioConsumoPorTipo = this.getRelatorioConsumoPorTipo.bind(this);\n    this.popularDadosIniciais();\n  }\n  getClientes() {\n    return this.empresa.getClientes;\n  }\n  getProdutos() {\n    return this.empresa.getProdutos;\n  }\n  getServicos() {\n    return this.empresa.getServicos;\n  }\n  cadastrarClienteComDados(nome, nomeSocial, cpfValor, dataEmissaoString) {\n    const partesData = dataEmissaoString.split('/');\n    const ano = new Number(partesData[2]).valueOf();\n    const mes = new Number(partesData[1]).valueOf() - 1;\n    const dia = new Number(partesData[0]).valueOf();\n    const dataEmissao = new Date(ano, mes, dia);\n    const cpf = new CPF(cpfValor, dataEmissao);\n    const cliente = new Cliente(nome, nomeSocial, cpf);\n    this.empresa.getClientes.push(cliente);\n    console.log(`Cliente ${nome} cadastrado com sucesso!`);\n  }\n  atualizarCliente(cpfCliente, novoNome, novoNomeSocial) {\n    const clienteParaAtualizar = this.empresa.getClientes.find(c => c.getCpf.getValor === cpfCliente);\n    if (clienteParaAtualizar) {\n      if (novoNome) clienteParaAtualizar.nome = novoNome;\n      if (novoNomeSocial) clienteParaAtualizar.nomeSocial = novoNomeSocial;\n      console.log(\"Cliente atualizado via GUI:\", clienteParaAtualizar);\n    } else {\n      console.warn(\"Cliente não encontrado para atualização:\", cpfCliente);\n    }\n  }\n  excluirCliente(cpfCliente) {\n    const index = this.empresa.getClientes.findIndex(c => c.getCpf.getValor === cpfCliente);\n    if (index !== -1) {\n      this.empresa.getClientes.splice(index, 1);\n      console.log(\"Cliente excluído via GUI:\", cpfCliente);\n    } else {\n      console.warn(\"Cliente não encontrado para exclusão:\", cpfCliente);\n    }\n  }\n\n  // Pets\n  cadastrarPet(cpfCliente, nome, tipo, raca, genero) {\n    const cliente = this.empresa.getClientes.find(c => c.getCpf.getValor === cpfCliente);\n    if (cliente) {\n      const pet = new Pet(nome, raca, genero, tipo);\n      cliente.getPets.push(pet);\n      console.log(`Pet ${nome} cadastrado para o cliente ${cliente.nome}`);\n    } else {\n      console.warn(`Cliente com CPF ${cpfCliente} não encontrado para cadastrar pet.`);\n    }\n  }\n  atualizarPet(cpfClienteOriginal, nomePetOriginal, novoNome, novoTipo, novaRaca, novoGenero) {\n    const cliente = this.empresa.getClientes.find(c => c.getCpf.getValor === cpfClienteOriginal);\n    if (cliente) {\n      const pet = cliente.getPets.find(p => p.getNome === nomePetOriginal);\n      if (pet) {\n        if (novoNome) pet.setNome(novoNome);\n        if (novoTipo) pet.setTipo(novoTipo);\n        if (novaRaca) pet.setRaca(novaRaca);\n        if (novoGenero) pet.setGenero(novoGenero);\n        console.log(`Pet ${nomePetOriginal} do cliente ${cliente.nome} atualizado.`);\n      } else {\n        console.warn(`Pet ${nomePetOriginal} não encontrado para o cliente ${cliente.nome}.`);\n      }\n    } else {\n      console.warn(`Cliente com CPF ${cpfClienteOriginal} não encontrado para atualizar pet.`);\n    }\n  }\n  excluirPet(cpfCliente, nomePet) {\n    const cliente = this.empresa.getClientes.find(c => c.getCpf.getValor === cpfCliente);\n    if (cliente) {\n      const index = cliente.getPets.findIndex(p => p.getNome === nomePet);\n      if (index !== -1) {\n        cliente.getPets.splice(index, 1);\n        console.log(`Pet ${nomePet} do cliente ${cliente.nome} excluído.`);\n      } else {\n        console.warn(`Pet ${nomePet} não encontrado para o cliente ${cliente.nome}.`);\n      }\n    } else {\n      console.warn(`Cliente com CPF ${cpfCliente} não encontrado para excluir pet.`);\n    }\n  }\n\n  // Produtos\n  cadastrarProduto(nome, valor, descricao) {\n    const produto = new Produto(nome, valor, descricao);\n    this.empresa.getProdutos.push(produto);\n    console.log(`Produto ${nome} cadastrado.`);\n  }\n  atualizarProduto(nomeProdutoOriginal, novoNome, novoValor, novaDescricao) {\n    const produto = this.empresa.getProdutos.find(p => p.getNome === nomeProdutoOriginal);\n    if (produto) {\n      if (novoNome) produto.setNome(novoNome);\n      if (novoValor !== undefined && novoValor !== null) produto.setValor(novoValor);\n      if (novaDescricao) produto.setDescricao(novaDescricao);\n      console.log(`Produto ${nomeProdutoOriginal} atualizado.`);\n    } else {\n      console.warn(`Produto ${nomeProdutoOriginal} não encontrado para atualização.`);\n    }\n  }\n  excluirProduto(nomeProduto) {\n    const index = this.empresa.getProdutos.findIndex(p => p.getNome === nomeProduto);\n    if (index !== -1) {\n      this.empresa.getProdutos.splice(index, 1);\n      console.log(`Produto ${nomeProduto} excluído.`);\n    } else {\n      console.warn(`Produto ${nomeProduto} não encontrado para exclusão.`);\n    }\n  }\n\n  // Serviços\n  cadastrarServico(nome, valor, descricao) {\n    const servico = new Servico(nome, valor, descricao);\n    this.empresa.getServicos.push(servico);\n    console.log(`Serviço ${nome} cadastrado.`);\n  }\n  atualizarServico(nomeServicoOriginal, novoNome, novoValor, novaDescricao) {\n    const servico = this.empresa.getServicos.find(s => s.getNome === nomeServicoOriginal);\n    if (servico) {\n      if (novoNome) servico.setNome(novoNome);\n      if (novoValor !== undefined && novoValor !== null) servico.setValor(novoValor);\n      if (novaDescricao) servico.setDescricao(novaDescricao);\n      console.log(`Serviço ${nomeServicoOriginal} atualizado.`);\n    } else {\n      console.warn(`Serviço ${nomeServicoOriginal} não encontrado para atualização.`);\n    }\n  }\n  excluirServico(nomeServico) {\n    const index = this.empresa.getServicos.findIndex(s => s.getNome === nomeServico);\n    if (index !== -1) {\n      this.empresa.getServicos.splice(index, 1);\n      console.log(`Serviço ${nomeServico} excluído.`);\n    } else {\n      console.warn(`Serviço ${nomeServico} não encontrado para exclusão.`);\n    }\n  }\n\n  // Registro de Consumo\n  registrarConsumo(cpfCliente, nomeItem, tipoItem) {\n    const cliente = this.empresa.getClientes.find(c => c.getCpf.getValor === cpfCliente);\n    if (cliente) {\n      if (tipoItem === 'produto') {\n        const produto = this.empresa.getProdutos.find(p => p.getNome === nomeItem);\n        if (produto) {\n          cliente.getProdutosConsumidos.push(produto);\n          console.log(`Produto ${nomeItem} registrado para ${cliente.nome}`);\n        } else {\n          console.warn(`Produto ${nomeItem} não encontrado.`);\n        }\n      } else if (tipoItem === 'servico') {\n        const servico = this.empresa.getServicos.find(s => s.getNome === nomeItem);\n        if (servico) {\n          cliente.getServicosConsumidos.push(servico);\n          console.log(`Serviço ${nomeItem} registrado para ${cliente.nome}`);\n        } else {\n          console.warn(`Serviço ${nomeItem} não encontrado.`);\n        }\n      }\n    } else {\n      console.warn(`Cliente com CPF ${cpfCliente} não encontrado.`);\n    }\n  }\n\n  // Relatórios \n  getRelatorioTop10ClientesPorQuantidade() {\n    const listaClientes = [];\n    this.empresa.getClientes.forEach(cliente => {\n      const produtos = cliente.getProdutosConsumidos.length;\n      const servicos = cliente.getServicosConsumidos.length;\n      const total = produtos + servicos;\n      listaClientes.push({\n        cliente,\n        quantidade: total\n      });\n    });\n    const top10 = listaClientes.sort((a, b) => b.quantidade - a.quantidade).slice(0, 10).map((item, index) => ({\n      posicao: index + 1,\n      cliente: item.cliente.nome,\n      quantidadeProdutos: item.cliente.getProdutosConsumidos.length,\n      quantidadeServicos: item.cliente.getServicosConsumidos.length,\n      total: item.quantidade\n    }));\n    return top10.filter(item => item.total > 0);\n  }\n  getRelatorioTop5ClientesPorValor() {\n    const listaClientes = [];\n    this.empresa.getClientes.forEach(cliente => {\n      let valorTotal = 0;\n      cliente.getProdutosConsumidos.forEach(produto => {\n        valorTotal += produto.getValor;\n      });\n      cliente.getServicosConsumidos.forEach(servico => {\n        valorTotal += servico.getValor;\n      });\n      listaClientes.push({\n        cliente,\n        valor: valorTotal\n      });\n    });\n    const top5 = listaClientes.sort((a, b) => b.valor - a.valor).slice(0, 5).map((item, index) => ({\n      posicao: index + 1,\n      cliente: item.cliente.nome,\n      valorTotal: item.valor\n    }));\n    return top5.filter(item => item.valorTotal > 0);\n  }\n  getRelatorioProdutosServicosMaisConsumidos() {\n    const contagem = {};\n    this.empresa.getProdutos.forEach(p => {\n      contagem[`Produto-${p.getNome}`] = {\n        nome: p.getNome,\n        tipo: 'Produto',\n        quantidade: 0\n      };\n    });\n    this.empresa.getServicos.forEach(s => {\n      contagem[`Serviço-${s.getNome}`] = {\n        nome: s.getNome,\n        tipo: 'Serviço',\n        quantidade: 0\n      };\n    });\n    this.empresa.getClientes.forEach(cliente => {\n      cliente.getProdutosConsumidos.forEach(produto => {\n        const key = `Produto-${produto.getNome}`;\n        if (contagem[key]) {\n          contagem[key].quantidade++;\n        }\n      });\n      cliente.getServicosConsumidos.forEach(servico => {\n        const key = `Serviço-${servico.getNome}`;\n        if (contagem[key]) {\n          contagem[key].quantidade++;\n        }\n      });\n    });\n    const ranking = Object.values(contagem).filter(item => item.quantidade > 0).sort((a, b) => b.quantidade - a.quantidade);\n    return ranking;\n  }\n  getRelatorioConsumoPorTipoRaca() {\n    const resultados = [];\n    console.log(\"[Relatório Tipo/Raça] Iniciando geração do relatório...\");\n    this.empresa.getClientes.forEach(cliente => {\n      console.log(`[Relatório Tipo/Raça] Processando cliente: ${cliente.nome} (${cliente.getCpf.getValor})`);\n      cliente.getPets.forEach(pet => {\n        const tipo = pet.getTipo;\n        const raca = pet.getRaca;\n        console.log(`  [Relatório Tipo/Raça] Pet: ${pet.getNome}, Tipo: '${tipo}', Raça: '${raca}'`);\n        if (!tipo || !raca || tipo.trim() === '' || raca.trim() === '') {\n          console.warn(`[Relatório Tipo/Raça] Pulando Pet com tipo/raça indefinidos/vazios para cliente ${cliente.nome}: ${pet.getNome}`);\n          return;\n        }\n        const tipoRaca = `${tipo} - ${raca}`;\n        cliente.getProdutosConsumidos.forEach(produto => {\n          let encontrado = resultados.find(r => r.tipoRaca === tipoRaca && r.nome === produto.getNome && r.tipo === 'Produto');\n          if (encontrado) {\n            encontrado.quantidade++;\n          } else {\n            resultados.push({\n              tipoRaca,\n              nome: produto.getNome,\n              tipo: 'Produto',\n              quantidade: 1\n            });\n          }\n          console.log(`    [Relatório Tipo/Raça] Consumo de Produto: ${produto.getNome} para ${tipoRaca}`);\n        });\n        cliente.getServicosConsumidos.forEach(servico => {\n          let encontrado = resultados.find(r => r.tipoRaca === tipoRaca && r.nome === servico.getNome && r.tipo === 'Serviço');\n          if (encontrado) {\n            encontrado.quantidade++;\n          } else {\n            resultados.push({\n              tipoRaca,\n              nome: servico.getNome,\n              tipo: 'Serviço',\n              quantidade: 1\n            });\n          }\n          console.log(`    [Relatório Tipo/Raça] Consumo de Serviço: ${servico.getNome} para ${tipoRaca}`);\n        });\n      });\n    });\n    console.log(\"[Relatório Tipo/Raça] Resultados brutos:\", resultados);\n    const grupos = {};\n    resultados.forEach(item => {\n      if (!grupos[item.tipoRaca]) grupos[item.tipoRaca] = [];\n      grupos[item.tipoRaca].push(item);\n    });\n    console.log(\"[Relatório Tipo/Raça] Grupos formados:\", grupos);\n    const relatorioFinal = [];\n    Object.keys(grupos).sort().forEach(tipoRaca => {\n      grupos[tipoRaca].sort((a, b) => b.quantidade - a.quantidade).forEach(item => {\n        relatorioFinal.push(item);\n      });\n    });\n    console.log(\"[Relatório Tipo/Raça] Relatório final (ordenado):\", relatorioFinal);\n    return relatorioFinal;\n  }\n  getRelatorioConsumoPorTipo() {\n    const resultados = [];\n    console.log(\"[Relatório Tipo] Iniciando geração do relatório...\");\n    this.empresa.getClientes.forEach(cliente => {\n      console.log(`[Relatório Tipo] Processando cliente: ${cliente.nome} (${cliente.getCpf.getValor})`);\n      cliente.getPets.forEach(pet => {\n        const tipoPet = pet.getTipo;\n        console.log(`  [Relatório Tipo] Pet: ${pet.getNome}, Tipo: '${tipoPet}'`);\n        if (!tipoPet || tipoPet.trim() === '') {\n          console.warn(`[Relatório Tipo] Pulando Pet com tipo indefinido/vazio para cliente ${cliente.nome}: ${pet.getNome}`);\n          return;\n        }\n        cliente.getProdutosConsumidos.forEach(produto => {\n          let encontrado = resultados.find(r => r.tipoPet === tipoPet && r.nomeItem === produto.getNome && r.tipoItem === 'Produto');\n          if (encontrado) {\n            encontrado.quantidade++;\n          } else {\n            resultados.push({\n              tipoPet,\n              nomeItem: produto.getNome,\n              tipoItem: 'Produto',\n              quantidade: 1\n            });\n          }\n          console.log(`    [Relatório Tipo] Consumo de Produto: ${produto.getNome} para ${tipoPet}`);\n        });\n        cliente.getServicosConsumidos.forEach(servico => {\n          let encontrado = resultados.find(r => r.tipoPet === tipoPet && r.nomeItem === servico.getNome && r.tipoItem === 'Serviço');\n          if (encontrado) {\n            encontrado.quantidade++;\n          } else {\n            resultados.push({\n              tipoPet,\n              nomeItem: servico.getNome,\n              tipoItem: 'Serviço',\n              quantidade: 1\n            });\n          }\n          console.log(`    [Relatório Tipo] Consumo de Serviço: ${servico.getNome} para ${tipoPet}`);\n        });\n      });\n    });\n    console.log(\"[Relatório Tipo] Resultados brutos:\", resultados);\n    const grupos = {};\n    resultados.forEach(item => {\n      if (!grupos[item.tipoPet]) grupos[item.tipoPet] = [];\n      grupos[item.tipoPet].push(item);\n    });\n    console.log(\"[Relatório Tipo] Grupos formados:\", grupos);\n    const relatorioFinal = [];\n    Object.keys(grupos).sort().forEach(tipoPet => {\n      grupos[tipoPet].sort((a, b) => b.quantidade - a.quantidade).forEach(item => {\n        relatorioFinal.push(item);\n      });\n    });\n    console.log(\"[Relatório Tipo] Relatório final (ordenado):\", relatorioFinal);\n    return relatorioFinal;\n  }\n\n  //Dados Iniciais para Teste\n  popularDadosIniciais() {\n    const cpf1 = new CPF(\"123.456.789-00\", new Date(2020, 0, 1));\n    const cliente1 = new Cliente(\"João da Silva\", \"João\", cpf1);\n    this.empresa.getClientes.push(cliente1);\n    const cpf2 = new CPF(\"987.654.321-00\", new Date(2021, 5, 15));\n    const cliente2 = new Cliente(\"Maria Souza\", \"Maria\", cpf2);\n    this.empresa.getClientes.push(cliente2);\n    const pet1 = new Pet(\"Rex\", \"Labrador\", \"Macho\", \"Cachorro\");\n    cliente1.getPets.push(pet1);\n    const pet2 = new Pet(\"Mia\", \"Persa\", \"Fêmea\", \"Gato\");\n    cliente2.getPets.push(pet2);\n    const pet3 = new Pet(\"Buddy\", \"Poodle\", \"Macho\", \"Cachorro\");\n    cliente1.getPets.push(pet3);\n    const prod1 = new Produto(\"Ração Premium\", 75.50, \"Ração de alta qualidade para cães\");\n    this.empresa.getProdutos.push(prod1);\n    const prod2 = new Produto(\"Brinquedo Mordedor\", 25.00, \"Brinquedo para cachorros\");\n    this.empresa.getProdutos.push(prod2);\n    const prod3 = new Produto(\"Coleira Anti-pulgas\", 50.00, \"Coleira para prevenir pulgas\");\n    this.empresa.getProdutos.push(prod3);\n    const serv1 = new Servico(\"Banho e Tosa\", 80.00, \"Serviço completo de higiene\");\n    this.empresa.getServicos.push(serv1);\n    const serv2 = new Servico(\"Consulta Veterinária\", 120.00, \"Atendimento médico para pets\");\n    this.empresa.getServicos.push(serv2);\n    const serv3 = new Servico(\"Vacinação\", 90.00, \"Aplicação de vacinas\");\n    this.empresa.getServicos.push(serv3);\n    cliente1.getProdutosConsumidos.push(prod1);\n    cliente1.getProdutosConsumidos.push(prod2);\n    cliente1.getServicosConsumidos.push(serv1);\n    cliente1.getServicosConsumidos.push(serv3);\n    cliente2.getProdutosConsumidos.push(prod1);\n    cliente2.getServicosConsumidos.push(serv2);\n    cliente2.getServicosConsumidos.push(serv2);\n    console.log(\"Dados iniciais populados.\");\n  }\n}\nconst empresaService = new EmpresaService();\nexport default empresaService;","map":{"version":3,"names":["Empresa","Cliente","Produto","Servico","Pet","CPF","EmpresaService","constructor","empresa","cadastrarClienteComDados","bind","atualizarCliente","excluirCliente","cadastrarPet","atualizarPet","excluirPet","cadastrarProduto","atualizarProduto","excluirProduto","cadastrarServico","atualizarServico","excluirServico","registrarConsumo","getRelatorioTop10ClientesPorQuantidade","getRelatorioTop5ClientesPorValor","getRelatorioProdutosServicosMaisConsumidos","getRelatorioConsumoPorTipoRaca","getRelatorioConsumoPorTipo","popularDadosIniciais","getClientes","getProdutos","getServicos","nome","nomeSocial","cpfValor","dataEmissaoString","partesData","split","ano","Number","valueOf","mes","dia","dataEmissao","Date","cpf","cliente","push","console","log","cpfCliente","novoNome","novoNomeSocial","clienteParaAtualizar","find","c","getCpf","getValor","warn","index","findIndex","splice","tipo","raca","genero","pet","getPets","cpfClienteOriginal","nomePetOriginal","novoTipo","novaRaca","novoGenero","p","getNome","setNome","setTipo","setRaca","setGenero","nomePet","valor","descricao","produto","nomeProdutoOriginal","novoValor","novaDescricao","undefined","setValor","setDescricao","nomeProduto","servico","nomeServicoOriginal","s","nomeServico","nomeItem","tipoItem","getProdutosConsumidos","getServicosConsumidos","listaClientes","forEach","produtos","length","servicos","total","quantidade","top10","sort","a","b","slice","map","item","posicao","quantidadeProdutos","quantidadeServicos","filter","valorTotal","top5","contagem","key","ranking","Object","values","resultados","getTipo","getRaca","trim","tipoRaca","encontrado","r","grupos","relatorioFinal","keys","tipoPet","cpf1","cliente1","cpf2","cliente2","pet1","pet2","pet3","prod1","prod2","prod3","serv1","serv2","serv3","empresaService"],"sources":["/home/ramonads/3/atviii/src/servicos/EmpresaService.ts"],"sourcesContent":["import Empresa from \"../modelo/empresa\";\nimport Cliente from \"../modelo/cliente\";\nimport Produto from \"../modelo/produto\";\nimport Servico from \"../modelo/servico\";\nimport Pet from \"../modelo/pet\";\nimport CPF from \"../modelo/cpf\";\nimport RG from \"../modelo/rg\";\nimport Telefone from \"../modelo/telefone\";\n\n\nclass EmpresaService {\n    private empresa: Empresa;\n\n    constructor() {\n        this.empresa = new Empresa();\n\n        this.cadastrarClienteComDados = this.cadastrarClienteComDados.bind(this);\n        this.atualizarCliente = this.atualizarCliente.bind(this);\n        this.excluirCliente = this.excluirCliente.bind(this);\n\n        this.cadastrarPet = this.cadastrarPet.bind(this);\n        this.atualizarPet = this.atualizarPet.bind(this);\n        this.excluirPet = this.excluirPet.bind(this);\n\n        this.cadastrarProduto = this.cadastrarProduto.bind(this);\n        this.atualizarProduto = this.atualizarProduto.bind(this);\n        this.excluirProduto = this.excluirProduto.bind(this);\n\n        this.cadastrarServico = this.cadastrarServico.bind(this);\n        this.atualizarServico = this.atualizarServico.bind(this);\n        this.excluirServico = this.excluirServico.bind(this);\n\n        this.registrarConsumo = this.registrarConsumo.bind(this);\n\n        this.getRelatorioTop10ClientesPorQuantidade = this.getRelatorioTop10ClientesPorQuantidade.bind(this);\n        this.getRelatorioTop5ClientesPorValor = this.getRelatorioTop5ClientesPorValor.bind(this);\n        this.getRelatorioProdutosServicosMaisConsumidos = this.getRelatorioProdutosServicosMaisConsumidos.bind(this);\n        this.getRelatorioConsumoPorTipoRaca = this.getRelatorioConsumoPorTipoRaca.bind(this);\n        this.getRelatorioConsumoPorTipo = this.getRelatorioConsumoPorTipo.bind(this);\n\n        this.popularDadosIniciais();\n    }\n\n    getClientes(): Cliente[] {\n        return this.empresa.getClientes;\n    }\n\n    getProdutos(): Produto[] {\n        return this.empresa.getProdutos;\n    }\n\n    getServicos(): Servico[] {\n        return this.empresa.getServicos;\n    }\n\n\n    cadastrarClienteComDados(nome: string, nomeSocial: string, cpfValor: string, dataEmissaoString: string): void {\n        const partesData = dataEmissaoString.split('/');\n        const ano = new Number(partesData[2]).valueOf();\n        const mes = new Number(partesData[1]).valueOf() - 1;\n        const dia = new Number(partesData[0]).valueOf();\n        const dataEmissao = new Date(ano, mes, dia);\n\n        const cpf = new CPF(cpfValor, dataEmissao);\n        const cliente = new Cliente(nome, nomeSocial, cpf);\n        this.empresa.getClientes.push(cliente);\n        console.log(`Cliente ${nome} cadastrado com sucesso!`);\n    }\n\n    atualizarCliente(cpfCliente: string, novoNome: string, novoNomeSocial: string): void {\n        const clienteParaAtualizar = this.empresa.getClientes.find(c => c.getCpf.getValor === cpfCliente);\n        if (clienteParaAtualizar) {\n            if (novoNome) clienteParaAtualizar.nome = novoNome;\n            if (novoNomeSocial) clienteParaAtualizar.nomeSocial = novoNomeSocial;\n            console.log(\"Cliente atualizado via GUI:\", clienteParaAtualizar);\n        } else {\n            console.warn(\"Cliente não encontrado para atualização:\", cpfCliente);\n        }\n    }\n\n    excluirCliente(cpfCliente: string): void {\n        const index = this.empresa.getClientes.findIndex(c => c.getCpf.getValor === cpfCliente);\n        if (index !== -1) {\n            this.empresa.getClientes.splice(index, 1);\n            console.log(\"Cliente excluído via GUI:\", cpfCliente);\n        } else {\n            console.warn(\"Cliente não encontrado para exclusão:\", cpfCliente);\n        }\n    }\n\n    // Pets\n    cadastrarPet(cpfCliente: string, nome: string, tipo: string, raca: string, genero: string): void {\n        const cliente = this.empresa.getClientes.find(c => c.getCpf.getValor === cpfCliente);\n        if (cliente) {\n            const pet = new Pet(nome, raca, genero, tipo);\n            cliente.getPets.push(pet);\n            console.log(`Pet ${nome} cadastrado para o cliente ${cliente.nome}`);\n        } else {\n            console.warn(`Cliente com CPF ${cpfCliente} não encontrado para cadastrar pet.`);\n        }\n    }\n\n    atualizarPet(cpfClienteOriginal: string, nomePetOriginal: string, novoNome: string, novoTipo: string, novaRaca: string, novoGenero: string): void {\n        const cliente = this.empresa.getClientes.find(c => c.getCpf.getValor === cpfClienteOriginal);\n        if (cliente) {\n            const pet = cliente.getPets.find(p => p.getNome === nomePetOriginal);\n            if (pet) {\n                if (novoNome) pet.setNome(novoNome);\n                if (novoTipo) pet.setTipo(novoTipo);\n                if (novaRaca) pet.setRaca(novaRaca);\n                if (novoGenero) pet.setGenero(novoGenero);\n                console.log(`Pet ${nomePetOriginal} do cliente ${cliente.nome} atualizado.`);\n            } else {\n                console.warn(`Pet ${nomePetOriginal} não encontrado para o cliente ${cliente.nome}.`);\n            }\n        } else {\n            console.warn(`Cliente com CPF ${cpfClienteOriginal} não encontrado para atualizar pet.`);\n        }\n    }\n\n    excluirPet(cpfCliente: string, nomePet: string): void {\n        const cliente = this.empresa.getClientes.find(c => c.getCpf.getValor === cpfCliente);\n        if (cliente) {\n            const index = cliente.getPets.findIndex(p => p.getNome === nomePet);\n            if (index !== -1) {\n                cliente.getPets.splice(index, 1);\n                console.log(`Pet ${nomePet} do cliente ${cliente.nome} excluído.`);\n            } else {\n                console.warn(`Pet ${nomePet} não encontrado para o cliente ${cliente.nome}.`);\n            }\n        } else {\n            console.warn(`Cliente com CPF ${cpfCliente} não encontrado para excluir pet.`);\n        }\n    }\n\n    // Produtos\n    cadastrarProduto(nome: string, valor: number, descricao: string): void {\n        const produto = new Produto(nome, valor, descricao);\n        this.empresa.getProdutos.push(produto);\n        console.log(`Produto ${nome} cadastrado.`);\n    }\n\n    atualizarProduto(nomeProdutoOriginal: string, novoNome: string, novoValor: number, novaDescricao: string): void {\n        const produto = this.empresa.getProdutos.find(p => p.getNome === nomeProdutoOriginal);\n        if (produto) {\n            if (novoNome) produto.setNome(novoNome);\n            if (novoValor !== undefined && novoValor !== null) produto.setValor(novoValor);\n            if (novaDescricao) produto.setDescricao(novaDescricao);\n            console.log(`Produto ${nomeProdutoOriginal} atualizado.`);\n        } else {\n            console.warn(`Produto ${nomeProdutoOriginal} não encontrado para atualização.`);\n        }\n    }\n\n    excluirProduto(nomeProduto: string): void {\n        const index = this.empresa.getProdutos.findIndex(p => p.getNome === nomeProduto);\n        if (index !== -1) {\n            this.empresa.getProdutos.splice(index, 1);\n            console.log(`Produto ${nomeProduto} excluído.`);\n        } else {\n            console.warn(`Produto ${nomeProduto} não encontrado para exclusão.`);\n        }\n    }\n\n    // Serviços\n    cadastrarServico(nome: string, valor: number, descricao: string): void {\n        const servico = new Servico(nome, valor, descricao);\n        this.empresa.getServicos.push(servico);\n        console.log(`Serviço ${nome} cadastrado.`);\n    }\n\n    atualizarServico(nomeServicoOriginal: string, novoNome: string, novoValor: number, novaDescricao: string): void {\n        const servico = this.empresa.getServicos.find(s => s.getNome === nomeServicoOriginal);\n        if (servico) {\n            if (novoNome) servico.setNome(novoNome);\n            if (novoValor !== undefined && novoValor !== null) servico.setValor(novoValor);\n            if (novaDescricao) servico.setDescricao(novaDescricao);\n            console.log(`Serviço ${nomeServicoOriginal} atualizado.`);\n        } else {\n            console.warn(`Serviço ${nomeServicoOriginal} não encontrado para atualização.`);\n        }\n    }\n\n    excluirServico(nomeServico: string): void {\n        const index = this.empresa.getServicos.findIndex(s => s.getNome === nomeServico);\n        if (index !== -1) {\n            this.empresa.getServicos.splice(index, 1);\n            console.log(`Serviço ${nomeServico} excluído.`);\n        } else {\n            console.warn(`Serviço ${nomeServico} não encontrado para exclusão.`);\n        }\n    }\n\n    // Registro de Consumo\n    registrarConsumo(cpfCliente: string, nomeItem: string, tipoItem: 'produto' | 'servico'): void {\n        const cliente = this.empresa.getClientes.find(c => c.getCpf.getValor === cpfCliente);\n        if (cliente) {\n            if (tipoItem === 'produto') {\n                const produto = this.empresa.getProdutos.find(p => p.getNome === nomeItem);\n                if (produto) {\n                    cliente.getProdutosConsumidos.push(produto);\n                    console.log(`Produto ${nomeItem} registrado para ${cliente.nome}`);\n                } else {\n                    console.warn(`Produto ${nomeItem} não encontrado.`);\n                }\n            } else if (tipoItem === 'servico') {\n                const servico = this.empresa.getServicos.find(s => s.getNome === nomeItem);\n                if (servico) {\n                    cliente.getServicosConsumidos.push(servico);\n                    console.log(`Serviço ${nomeItem} registrado para ${cliente.nome}`);\n                } else {\n                    console.warn(`Serviço ${nomeItem} não encontrado.`);\n                }\n            }\n        } else {\n            console.warn(`Cliente com CPF ${cpfCliente} não encontrado.`);\n        }\n    }\n\n    // Relatórios \n    getRelatorioTop10ClientesPorQuantidade() {\n        const listaClientes: { cliente: Cliente, quantidade: number }[] = [];\n        this.empresa.getClientes.forEach(cliente => {\n            const produtos = cliente.getProdutosConsumidos.length;\n            const servicos = cliente.getServicosConsumidos.length;\n            const total = produtos + servicos;\n            listaClientes.push({ cliente, quantidade: total });\n        });\n        const top10 = listaClientes\n            .sort((a, b) => b.quantidade - a.quantidade)\n            .slice(0, 10)\n            .map((item, index) => ({\n                posicao: index + 1,\n                cliente: item.cliente.nome,\n                quantidadeProdutos: item.cliente.getProdutosConsumidos.length,\n                quantidadeServicos: item.cliente.getServicosConsumidos.length,\n                total: item.quantidade\n            }));\n        return top10.filter(item => item.total > 0);\n    }\n\n    getRelatorioTop5ClientesPorValor() {\n        const listaClientes: { cliente: Cliente, valor: number }[] = [];\n        this.empresa.getClientes.forEach(cliente => {\n            let valorTotal = 0;\n            cliente.getProdutosConsumidos.forEach(produto => {\n                valorTotal += produto.getValor;\n            });\n            cliente.getServicosConsumidos.forEach(servico => {\n                valorTotal += servico.getValor;\n            });\n            listaClientes.push({ cliente, valor: valorTotal });\n        });\n        const top5 = listaClientes\n            .sort((a, b) => b.valor - a.valor)\n            .slice(0, 5)\n            .map((item, index) => ({\n                posicao: index + 1,\n                cliente: item.cliente.nome,\n                valorTotal: item.valor\n            }));\n        return top5.filter(item => item.valorTotal > 0);\n    }\n\n    getRelatorioProdutosServicosMaisConsumidos() {\n        const contagem: { [key: string]: { nome: string, tipo: 'Produto' | 'Serviço', quantidade: number } } = {};\n\n        this.empresa.getProdutos.forEach(p => {\n            contagem[`Produto-${p.getNome}`] = { nome: p.getNome, tipo: 'Produto', quantidade: 0 };\n        });\n        this.empresa.getServicos.forEach(s => {\n            contagem[`Serviço-${s.getNome}`] = { nome: s.getNome, tipo: 'Serviço', quantidade: 0 };\n        });\n\n        this.empresa.getClientes.forEach(cliente => {\n            cliente.getProdutosConsumidos.forEach(produto => {\n                const key = `Produto-${produto.getNome}`;\n                if (contagem[key]) {\n                    contagem[key].quantidade++;\n                }\n            });\n            cliente.getServicosConsumidos.forEach(servico => {\n                const key = `Serviço-${servico.getNome}`;\n                if (contagem[key]) {\n                    contagem[key].quantidade++;\n                }\n            });\n        });\n        const ranking = Object.values(contagem)\n            .filter(item => item.quantidade > 0)\n            .sort((a, b) => b.quantidade - a.quantidade);\n        return ranking;\n    }\n\n    getRelatorioConsumoPorTipoRaca() {\n        const resultados: { tipoRaca: string, nome: string, tipo: 'Produto' | 'Serviço', quantidade: number }[] = [];\n        console.log(\"[Relatório Tipo/Raça] Iniciando geração do relatório...\");\n\n        this.empresa.getClientes.forEach(cliente => {\n            console.log(`[Relatório Tipo/Raça] Processando cliente: ${cliente.nome} (${cliente.getCpf.getValor})`);\n            cliente.getPets.forEach(pet => {\n                const tipo = pet.getTipo;\n                const raca = pet.getRaca;\n                \n                console.log(`  [Relatório Tipo/Raça] Pet: ${pet.getNome}, Tipo: '${tipo}', Raça: '${raca}'`);\n\n                if (!tipo || !raca || tipo.trim() === '' || raca.trim() === '') {\n                    console.warn(`[Relatório Tipo/Raça] Pulando Pet com tipo/raça indefinidos/vazios para cliente ${cliente.nome}: ${pet.getNome}`);\n                    return; \n                }\n\n                const tipoRaca = `${tipo} - ${raca}`;\n\n                cliente.getProdutosConsumidos.forEach(produto => {\n                    let encontrado = resultados.find(r => r.tipoRaca === tipoRaca && r.nome === produto.getNome && r.tipo === 'Produto');\n                    if (encontrado) {\n                        encontrado.quantidade++;\n                    } else {\n                        resultados.push({ tipoRaca, nome: produto.getNome, tipo: 'Produto', quantidade: 1 });\n                    }\n                    console.log(`    [Relatório Tipo/Raça] Consumo de Produto: ${produto.getNome} para ${tipoRaca}`);\n                });\n                cliente.getServicosConsumidos.forEach(servico => {\n                    let encontrado = resultados.find(r => r.tipoRaca === tipoRaca && r.nome === servico.getNome && r.tipo === 'Serviço');\n                    if (encontrado) {\n                        encontrado.quantidade++;\n                    } else {\n                        resultados.push({ tipoRaca, nome: servico.getNome, tipo: 'Serviço', quantidade: 1 });\n                    }\n                    console.log(`    [Relatório Tipo/Raça] Consumo de Serviço: ${servico.getNome} para ${tipoRaca}`);\n                });\n            });\n        });\n        \n        console.log(\"[Relatório Tipo/Raça] Resultados brutos:\", resultados);\n\n        const grupos: { [key: string]: { tipoRaca: string, nome: string, tipo: 'Produto' | 'Serviço', quantidade: number }[] } = {};\n        resultados.forEach(item => {\n            if (!grupos[item.tipoRaca]) grupos[item.tipoRaca] = [];\n            grupos[item.tipoRaca].push(item);\n        });\n        \n        console.log(\"[Relatório Tipo/Raça] Grupos formados:\", grupos);\n\n        const relatorioFinal: any[] = [];\n        Object.keys(grupos).sort().forEach(tipoRaca => {\n            grupos[tipoRaca].sort((a, b) => b.quantidade - a.quantidade).forEach(item => {\n                relatorioFinal.push(item);\n            });\n        });\n        \n        console.log(\"[Relatório Tipo/Raça] Relatório final (ordenado):\", relatorioFinal);\n        return relatorioFinal;\n    }\n\n    getRelatorioConsumoPorTipo() {\n        const resultados: { tipoPet: string, nomeItem: string, tipoItem: 'Produto' | 'Serviço', quantidade: number }[] = [];\n        console.log(\"[Relatório Tipo] Iniciando geração do relatório...\");\n\n        this.empresa.getClientes.forEach(cliente => {\n            console.log(`[Relatório Tipo] Processando cliente: ${cliente.nome} (${cliente.getCpf.getValor})`);\n            cliente.getPets.forEach(pet => {\n                const tipoPet = pet.getTipo;\n                \n                console.log(`  [Relatório Tipo] Pet: ${pet.getNome}, Tipo: '${tipoPet}'`);\n\n                if (!tipoPet || tipoPet.trim() === '') {\n                    console.warn(`[Relatório Tipo] Pulando Pet com tipo indefinido/vazio para cliente ${cliente.nome}: ${pet.getNome}`);\n                    return; \n                }\n\n                cliente.getProdutosConsumidos.forEach(produto => {\n                    let encontrado = resultados.find(r => r.tipoPet === tipoPet && r.nomeItem === produto.getNome && r.tipoItem === 'Produto');\n                    if (encontrado) {\n                        encontrado.quantidade++;\n                    } else {\n                        resultados.push({ tipoPet, nomeItem: produto.getNome, tipoItem: 'Produto', quantidade: 1 });\n                    }\n                    console.log(`    [Relatório Tipo] Consumo de Produto: ${produto.getNome} para ${tipoPet}`);\n                });\n                cliente.getServicosConsumidos.forEach(servico => {\n                    let encontrado = resultados.find(r => r.tipoPet === tipoPet && r.nomeItem === servico.getNome && r.tipoItem === 'Serviço');\n                    if (encontrado) {\n                        encontrado.quantidade++;\n                    } else {\n                        resultados.push({ tipoPet, nomeItem: servico.getNome, tipoItem: 'Serviço', quantidade: 1 });\n                    }\n                    console.log(`    [Relatório Tipo] Consumo de Serviço: ${servico.getNome} para ${tipoPet}`);\n                });\n            });\n        });\n\n        console.log(\"[Relatório Tipo] Resultados brutos:\", resultados);\n\n        const grupos: { [key: string]: { tipoPet: string, nomeItem: string, tipoItem: 'Produto' | 'Serviço', quantidade: number }[] } = {};\n        resultados.forEach(item => {\n            if (!grupos[item.tipoPet]) grupos[item.tipoPet] = [];\n            grupos[item.tipoPet].push(item);\n        });\n        \n        console.log(\"[Relatório Tipo] Grupos formados:\", grupos);\n\n        const relatorioFinal: any[] = [];\n        Object.keys(grupos).sort().forEach(tipoPet => {\n            grupos[tipoPet].sort((a, b) => b.quantidade - a.quantidade).forEach(item => {\n                relatorioFinal.push(item);\n            });\n        });\n        \n        console.log(\"[Relatório Tipo] Relatório final (ordenado):\", relatorioFinal);\n        return relatorioFinal;\n    }\n\n\n    //Dados Iniciais para Teste\n    private popularDadosIniciais(): void {\n        const cpf1 = new CPF(\"123.456.789-00\", new Date(2020, 0, 1));\n        const cliente1 = new Cliente(\"João da Silva\", \"João\", cpf1);\n        this.empresa.getClientes.push(cliente1);\n\n        const cpf2 = new CPF(\"987.654.321-00\", new Date(2021, 5, 15));\n        const cliente2 = new Cliente(\"Maria Souza\", \"Maria\", cpf2);\n        this.empresa.getClientes.push(cliente2);\n\n        const pet1 = new Pet(\"Rex\", \"Labrador\", \"Macho\", \"Cachorro\");\n        cliente1.getPets.push(pet1);\n        const pet2 = new Pet(\"Mia\", \"Persa\", \"Fêmea\", \"Gato\");\n        cliente2.getPets.push(pet2);\n        const pet3 = new Pet(\"Buddy\", \"Poodle\", \"Macho\", \"Cachorro\");\n        cliente1.getPets.push(pet3);\n\n\n        const prod1 = new Produto(\"Ração Premium\", 75.50, \"Ração de alta qualidade para cães\");\n        this.empresa.getProdutos.push(prod1);\n        const prod2 = new Produto(\"Brinquedo Mordedor\", 25.00, \"Brinquedo para cachorros\");\n        this.empresa.getProdutos.push(prod2);\n        const prod3 = new Produto(\"Coleira Anti-pulgas\", 50.00, \"Coleira para prevenir pulgas\");\n        this.empresa.getProdutos.push(prod3);\n\n\n        const serv1 = new Servico(\"Banho e Tosa\", 80.00, \"Serviço completo de higiene\");\n        this.empresa.getServicos.push(serv1);\n        const serv2 = new Servico(\"Consulta Veterinária\", 120.00, \"Atendimento médico para pets\");\n        this.empresa.getServicos.push(serv2);\n        const serv3 = new Servico(\"Vacinação\", 90.00, \"Aplicação de vacinas\");\n        this.empresa.getServicos.push(serv3);\n\n\n        cliente1.getProdutosConsumidos.push(prod1); \n        cliente1.getProdutosConsumidos.push(prod2); \n        cliente1.getServicosConsumidos.push(serv1); \n        cliente1.getServicosConsumidos.push(serv3); \n\n        cliente2.getProdutosConsumidos.push(prod1); \n        cliente2.getServicosConsumidos.push(serv2); \n        cliente2.getServicosConsumidos.push(serv2); \n\n        console.log(\"Dados iniciais populados.\");\n    }\n}\n\nconst empresaService = new EmpresaService();\nexport default empresaService;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}