[{"/home/ramonads/3/atviii/src/index.tsx":"1","/home/ramonads/3/atviii/src/reportWebVitals.ts":"2","/home/ramonads/3/atviii/src/componentes/roteador.tsx":"3","/home/ramonads/3/atviii/src/componentes/barraNavegacao.tsx":"4","/home/ramonads/3/atviii/src/servicos/EmpresaService.ts":"5","/home/ramonads/3/atviii/src/componentes/clientes/listaCliente.tsx":"6","/home/ramonads/3/atviii/src/componentes/clientes/formularioAtualizacaoCliente.tsx":"7","/home/ramonads/3/atviii/src/componentes/clientes/formularioCadastroCliente.tsx":"8","/home/ramonads/3/atviii/src/componentes/clientes/confirmacaoExclusaoCliente.tsx":"9","/home/ramonads/3/atviii/src/componentes/pets/FormularioCadastroPet.tsx":"10","/home/ramonads/3/atviii/src/componentes/pets/FormularioAtualizacaoPet.tsx":"11","/home/ramonads/3/atviii/src/componentes/pets/ConfirmacaoExclusaoPet.tsx":"12","/home/ramonads/3/atviii/src/componentes/pets/ListaPets.tsx":"13","/home/ramonads/3/atviii/src/componentes/produtos/ListaProdutos.tsx":"14","/home/ramonads/3/atviii/src/componentes/produtos/FormularioCadastroProduto.tsx":"15","/home/ramonads/3/atviii/src/componentes/produtos/FormularioAtualizacaoProduto.tsx":"16","/home/ramonads/3/atviii/src/componentes/produtos/ConfirmacaoExclusaoProduto.tsx":"17","/home/ramonads/3/atviii/src/componentes/servicos/FormularioCadastroServico.tsx":"18","/home/ramonads/3/atviii/src/componentes/servicos/ListaServicos.tsx":"19","/home/ramonads/3/atviii/src/componentes/servicos/FormularioAtualizacaoServico.tsx":"20","/home/ramonads/3/atviii/src/componentes/servicos/ConfirmacaoExclusaoServico.tsx":"21","/home/ramonads/3/atviii/src/componentes/relatorios/RegistroConsumo.tsx":"22","/home/ramonads/3/atviii/src/componentes/relatorios/RelatorioClientesMaisConsumiram.tsx":"23","/home/ramonads/3/atviii/src/componentes/relatorios/RelatorioProdutosServicosMaisConsumidos.tsx":"24","/home/ramonads/3/atviii/src/componentes/relatorios/RelatorioConsumoPorTipoRaca.tsx":"25","/home/ramonads/3/atviii/src/componentes/relatorios/RelatorioClientesMaisGastaram.tsx":"26","/home/ramonads/3/atviii/src/componentes/relatorios/RelatorioConsumoPorTipo.tsx":"27","/home/ramonads/3/atviii/src/modelo/empresa.ts":"28","/home/ramonads/3/atviii/src/modelo/cliente.ts":"29","/home/ramonads/3/atviii/src/modelo/produto.ts":"30","/home/ramonads/3/atviii/src/modelo/servico.ts":"31","/home/ramonads/3/atviii/src/modelo/pet.ts":"32","/home/ramonads/3/atviii/src/modelo/cpf.ts":"33"},{"size":364,"mtime":1752001354509,"results":"34","hashOfConfig":"35"},{"size":424,"mtime":1752001354516,"results":"36","hashOfConfig":"35"},{"size":13215,"mtime":1752001354506,"results":"37","hashOfConfig":"35"},{"size":1651,"mtime":1752001354503,"results":"38","hashOfConfig":"35"},{"size":20951,"mtime":1752001354516,"results":"39","hashOfConfig":"35"},{"size":2653,"mtime":1752001354503,"results":"40","hashOfConfig":"35"},{"size":3858,"mtime":1752001354503,"results":"41","hashOfConfig":"35"},{"size":3929,"mtime":1752001354503,"results":"42","hashOfConfig":"35"},{"size":2135,"mtime":1752001354503,"results":"43","hashOfConfig":"35"},{"size":4242,"mtime":1752001354503,"results":"44","hashOfConfig":"35"},{"size":4510,"mtime":1752001354503,"results":"45","hashOfConfig":"35"},{"size":2195,"mtime":1752001354503,"results":"46","hashOfConfig":"35"},{"size":2923,"mtime":1752001354503,"results":"47","hashOfConfig":"35"},{"size":2676,"mtime":1752001354506,"results":"48","hashOfConfig":"35"},{"size":2675,"mtime":1752001354503,"results":"49","hashOfConfig":"35"},{"size":3892,"mtime":1752001354503,"results":"50","hashOfConfig":"35"},{"size":2129,"mtime":1752001354503,"results":"51","hashOfConfig":"35"},{"size":2679,"mtime":1752001354506,"results":"52","hashOfConfig":"35"},{"size":2681,"mtime":1752001354506,"results":"53","hashOfConfig":"35"},{"size":3903,"mtime":1752001354506,"results":"54","hashOfConfig":"35"},{"size":2144,"mtime":1752001354506,"results":"55","hashOfConfig":"35"},{"size":6547,"mtime":1752001354506,"results":"56","hashOfConfig":"35"},{"size":2452,"mtime":1752001354506,"results":"57","hashOfConfig":"35"},{"size":2042,"mtime":1752001354506,"results":"58","hashOfConfig":"35"},{"size":2894,"mtime":1752001354506,"results":"59","hashOfConfig":"35"},{"size":2142,"mtime":1752001354506,"results":"60","hashOfConfig":"35"},{"size":2917,"mtime":1752001354506,"results":"61","hashOfConfig":"35"},{"size":540,"mtime":1752001354509,"results":"62","hashOfConfig":"35"},{"size":1401,"mtime":1752001354509,"results":"63","hashOfConfig":"35"},{"size":757,"mtime":1752001354509,"results":"64","hashOfConfig":"35"},{"size":757,"mtime":1752001354509,"results":"65","hashOfConfig":"35"},{"size":836,"mtime":1752001354509,"results":"66","hashOfConfig":"35"},{"size":354,"mtime":1752001354509,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1g1u513",{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156"},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164"},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168"},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172"},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ramonads/3/atviii/src/index.tsx",[],[],"/home/ramonads/3/atviii/src/reportWebVitals.ts",[],[],"/home/ramonads/3/atviii/src/componentes/roteador.tsx",[],[],"/home/ramonads/3/atviii/src/componentes/barraNavegacao.tsx",["191"],[],"import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\n\ntype Props = {\n    tema: string,\n    botoes: string[],\n    seletorView: (novaTela: string, evento?: React.MouseEvent | React.FormEvent) => void\n}\n\nexport default function BarraNavegacao(props: Props) { //\n\n    const gerarListaBotoes = () => {\n        if (props.botoes.length <= 0) {\n            return <></>\n        } else {\n            let lista = props.botoes.map(valor => //\n                <li key={valor} className=\"nav-item\">\n                    <a className=\"nav-link\" href=\"#\" onClick={(e) => props.seletorView(valor, e)}>{valor}</a>\n                </li>\n            )\n            return lista\n        }\n    }\n\n    let tema = props.tema //\n    return (\n        <>\n            <nav className=\"navbar navbar-expand-lg\" data-bs-theme=\"light\" style={{ backgroundColor: tema, marginBottom: 10 }}>\n                <div className=\"container-fluid\">\n                    <span className=\"navbar-brand mb-0 h1\">PetLovers</span>\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                        <ul className=\"navbar-nav\">\n                            {gerarListaBotoes()}\n                        </ul>\n                    </div>\n                </div>\n            </nav>\n        </>\n    )\n}","/home/ramonads/3/atviii/src/servicos/EmpresaService.ts",["192","193","194","195","196"],[],"import Empresa from \"../modelo/empresa\";\nimport Cliente from \"../modelo/cliente\";\nimport Produto from \"../modelo/produto\";\nimport Servico from \"../modelo/servico\";\nimport Pet from \"../modelo/pet\";\nimport CPF from \"../modelo/cpf\";\nimport RG from \"../modelo/rg\";\nimport Telefone from \"../modelo/telefone\";\n\n\nclass EmpresaService {\n    private empresa: Empresa;\n\n    constructor() {\n        this.empresa = new Empresa();\n\n        this.cadastrarClienteComDados = this.cadastrarClienteComDados.bind(this);\n        this.atualizarCliente = this.atualizarCliente.bind(this);\n        this.excluirCliente = this.excluirCliente.bind(this);\n\n        this.cadastrarPet = this.cadastrarPet.bind(this);\n        this.atualizarPet = this.atualizarPet.bind(this);\n        this.excluirPet = this.excluirPet.bind(this);\n\n        this.cadastrarProduto = this.cadastrarProduto.bind(this);\n        this.atualizarProduto = this.atualizarProduto.bind(this);\n        this.excluirProduto = this.excluirProduto.bind(this);\n\n        this.cadastrarServico = this.cadastrarServico.bind(this);\n        this.atualizarServico = this.atualizarServico.bind(this);\n        this.excluirServico = this.excluirServico.bind(this);\n\n        this.registrarConsumo = this.registrarConsumo.bind(this);\n\n        this.getRelatorioTop10ClientesPorQuantidade = this.getRelatorioTop10ClientesPorQuantidade.bind(this);\n        this.getRelatorioTop5ClientesPorValor = this.getRelatorioTop5ClientesPorValor.bind(this);\n        this.getRelatorioProdutosServicosMaisConsumidos = this.getRelatorioProdutosServicosMaisConsumidos.bind(this);\n        this.getRelatorioConsumoPorTipoRaca = this.getRelatorioConsumoPorTipoRaca.bind(this);\n        this.getRelatorioConsumoPorTipo = this.getRelatorioConsumoPorTipo.bind(this);\n\n        this.popularDadosIniciais();\n    }\n\n    getClientes(): Cliente[] {\n        return this.empresa.getClientes;\n    }\n\n    getProdutos(): Produto[] {\n        return this.empresa.getProdutos;\n    }\n\n    getServicos(): Servico[] {\n        return this.empresa.getServicos;\n    }\n\n\n    cadastrarClienteComDados(nome: string, nomeSocial: string, cpfValor: string, dataEmissaoString: string): void {\n        const partesData = dataEmissaoString.split('/');\n        const ano = new Number(partesData[2]).valueOf();\n        const mes = new Number(partesData[1]).valueOf() - 1;\n        const dia = new Number(partesData[0]).valueOf();\n        const dataEmissao = new Date(ano, mes, dia);\n\n        const cpf = new CPF(cpfValor, dataEmissao);\n        const cliente = new Cliente(nome, nomeSocial, cpf);\n        this.empresa.getClientes.push(cliente);\n        console.log(`Cliente ${nome} cadastrado com sucesso!`);\n    }\n\n    atualizarCliente(cpfCliente: string, novoNome: string, novoNomeSocial: string): void {\n        const clienteParaAtualizar = this.empresa.getClientes.find(c => c.getCpf.getValor === cpfCliente);\n        if (clienteParaAtualizar) {\n            if (novoNome) clienteParaAtualizar.nome = novoNome;\n            if (novoNomeSocial) clienteParaAtualizar.nomeSocial = novoNomeSocial;\n            console.log(\"Cliente atualizado via GUI:\", clienteParaAtualizar);\n        } else {\n            console.warn(\"Cliente não encontrado para atualização:\", cpfCliente);\n        }\n    }\n\n    excluirCliente(cpfCliente: string): void {\n        const index = this.empresa.getClientes.findIndex(c => c.getCpf.getValor === cpfCliente);\n        if (index !== -1) {\n            this.empresa.getClientes.splice(index, 1);\n            console.log(\"Cliente excluído via GUI:\", cpfCliente);\n        } else {\n            console.warn(\"Cliente não encontrado para exclusão:\", cpfCliente);\n        }\n    }\n\n    // Pets\n    cadastrarPet(cpfCliente: string, nome: string, tipo: string, raca: string, genero: string): void {\n        const cliente = this.empresa.getClientes.find(c => c.getCpf.getValor === cpfCliente);\n        if (cliente) {\n            const pet = new Pet(nome, raca, genero, tipo);\n            cliente.getPets.push(pet);\n            console.log(`Pet ${nome} cadastrado para o cliente ${cliente.nome}`);\n        } else {\n            console.warn(`Cliente com CPF ${cpfCliente} não encontrado para cadastrar pet.`);\n        }\n    }\n\n    atualizarPet(cpfClienteOriginal: string, nomePetOriginal: string, novoNome: string, novoTipo: string, novaRaca: string, novoGenero: string): void {\n        const cliente = this.empresa.getClientes.find(c => c.getCpf.getValor === cpfClienteOriginal);\n        if (cliente) {\n            const pet = cliente.getPets.find(p => p.getNome === nomePetOriginal);\n            if (pet) {\n                if (novoNome) pet.setNome(novoNome);\n                if (novoTipo) pet.setTipo(novoTipo);\n                if (novaRaca) pet.setRaca(novaRaca);\n                if (novoGenero) pet.setGenero(novoGenero);\n                console.log(`Pet ${nomePetOriginal} do cliente ${cliente.nome} atualizado.`);\n            } else {\n                console.warn(`Pet ${nomePetOriginal} não encontrado para o cliente ${cliente.nome}.`);\n            }\n        } else {\n            console.warn(`Cliente com CPF ${cpfClienteOriginal} não encontrado para atualizar pet.`);\n        }\n    }\n\n    excluirPet(cpfCliente: string, nomePet: string): void {\n        const cliente = this.empresa.getClientes.find(c => c.getCpf.getValor === cpfCliente);\n        if (cliente) {\n            const index = cliente.getPets.findIndex(p => p.getNome === nomePet);\n            if (index !== -1) {\n                cliente.getPets.splice(index, 1);\n                console.log(`Pet ${nomePet} do cliente ${cliente.nome} excluído.`);\n            } else {\n                console.warn(`Pet ${nomePet} não encontrado para o cliente ${cliente.nome}.`);\n            }\n        } else {\n            console.warn(`Cliente com CPF ${cpfCliente} não encontrado para excluir pet.`);\n        }\n    }\n\n    // Produtos\n    cadastrarProduto(nome: string, valor: number, descricao: string): void {\n        const produto = new Produto(nome, valor, descricao);\n        this.empresa.getProdutos.push(produto);\n        console.log(`Produto ${nome} cadastrado.`);\n    }\n\n    atualizarProduto(nomeProdutoOriginal: string, novoNome: string, novoValor: number, novaDescricao: string): void {\n        const produto = this.empresa.getProdutos.find(p => p.getNome === nomeProdutoOriginal);\n        if (produto) {\n            if (novoNome) produto.setNome(novoNome);\n            if (novoValor !== undefined && novoValor !== null) produto.setValor(novoValor);\n            if (novaDescricao) produto.setDescricao(novaDescricao);\n            console.log(`Produto ${nomeProdutoOriginal} atualizado.`);\n        } else {\n            console.warn(`Produto ${nomeProdutoOriginal} não encontrado para atualização.`);\n        }\n    }\n\n    excluirProduto(nomeProduto: string): void {\n        const index = this.empresa.getProdutos.findIndex(p => p.getNome === nomeProduto);\n        if (index !== -1) {\n            this.empresa.getProdutos.splice(index, 1);\n            console.log(`Produto ${nomeProduto} excluído.`);\n        } else {\n            console.warn(`Produto ${nomeProduto} não encontrado para exclusão.`);\n        }\n    }\n\n    // Serviços\n    cadastrarServico(nome: string, valor: number, descricao: string): void {\n        const servico = new Servico(nome, valor, descricao);\n        this.empresa.getServicos.push(servico);\n        console.log(`Serviço ${nome} cadastrado.`);\n    }\n\n    atualizarServico(nomeServicoOriginal: string, novoNome: string, novoValor: number, novaDescricao: string): void {\n        const servico = this.empresa.getServicos.find(s => s.getNome === nomeServicoOriginal);\n        if (servico) {\n            if (novoNome) servico.setNome(novoNome);\n            if (novoValor !== undefined && novoValor !== null) servico.setValor(novoValor);\n            if (novaDescricao) servico.setDescricao(novaDescricao);\n            console.log(`Serviço ${nomeServicoOriginal} atualizado.`);\n        } else {\n            console.warn(`Serviço ${nomeServicoOriginal} não encontrado para atualização.`);\n        }\n    }\n\n    excluirServico(nomeServico: string): void {\n        const index = this.empresa.getServicos.findIndex(s => s.getNome === nomeServico);\n        if (index !== -1) {\n            this.empresa.getServicos.splice(index, 1);\n            console.log(`Serviço ${nomeServico} excluído.`);\n        } else {\n            console.warn(`Serviço ${nomeServico} não encontrado para exclusão.`);\n        }\n    }\n\n    // Registro de Consumo\n    registrarConsumo(cpfCliente: string, nomeItem: string, tipoItem: 'produto' | 'servico'): void {\n        const cliente = this.empresa.getClientes.find(c => c.getCpf.getValor === cpfCliente);\n        if (cliente) {\n            if (tipoItem === 'produto') {\n                const produto = this.empresa.getProdutos.find(p => p.getNome === nomeItem);\n                if (produto) {\n                    cliente.getProdutosConsumidos.push(produto);\n                    console.log(`Produto ${nomeItem} registrado para ${cliente.nome}`);\n                } else {\n                    console.warn(`Produto ${nomeItem} não encontrado.`);\n                }\n            } else if (tipoItem === 'servico') {\n                const servico = this.empresa.getServicos.find(s => s.getNome === nomeItem);\n                if (servico) {\n                    cliente.getServicosConsumidos.push(servico);\n                    console.log(`Serviço ${nomeItem} registrado para ${cliente.nome}`);\n                } else {\n                    console.warn(`Serviço ${nomeItem} não encontrado.`);\n                }\n            }\n        } else {\n            console.warn(`Cliente com CPF ${cpfCliente} não encontrado.`);\n        }\n    }\n\n    // Relatórios \n    getRelatorioTop10ClientesPorQuantidade() {\n        const listaClientes: { cliente: Cliente, quantidade: number }[] = [];\n        this.empresa.getClientes.forEach(cliente => {\n            const produtos = cliente.getProdutosConsumidos.length;\n            const servicos = cliente.getServicosConsumidos.length;\n            const total = produtos + servicos;\n            listaClientes.push({ cliente, quantidade: total });\n        });\n        const top10 = listaClientes\n            .sort((a, b) => b.quantidade - a.quantidade)\n            .slice(0, 10)\n            .map((item, index) => ({\n                posicao: index + 1,\n                cliente: item.cliente.nome,\n                quantidadeProdutos: item.cliente.getProdutosConsumidos.length,\n                quantidadeServicos: item.cliente.getServicosConsumidos.length,\n                total: item.quantidade\n            }));\n        return top10.filter(item => item.total > 0);\n    }\n\n    getRelatorioTop5ClientesPorValor() {\n        const listaClientes: { cliente: Cliente, valor: number }[] = [];\n        this.empresa.getClientes.forEach(cliente => {\n            let valorTotal = 0;\n            cliente.getProdutosConsumidos.forEach(produto => {\n                valorTotal += produto.getValor;\n            });\n            cliente.getServicosConsumidos.forEach(servico => {\n                valorTotal += servico.getValor;\n            });\n            listaClientes.push({ cliente, valor: valorTotal });\n        });\n        const top5 = listaClientes\n            .sort((a, b) => b.valor - a.valor)\n            .slice(0, 5)\n            .map((item, index) => ({\n                posicao: index + 1,\n                cliente: item.cliente.nome,\n                valorTotal: item.valor\n            }));\n        return top5.filter(item => item.valorTotal > 0);\n    }\n\n    getRelatorioProdutosServicosMaisConsumidos() {\n        const contagem: { [key: string]: { nome: string, tipo: 'Produto' | 'Serviço', quantidade: number } } = {};\n\n        this.empresa.getProdutos.forEach(p => {\n            contagem[`Produto-${p.getNome}`] = { nome: p.getNome, tipo: 'Produto', quantidade: 0 };\n        });\n        this.empresa.getServicos.forEach(s => {\n            contagem[`Serviço-${s.getNome}`] = { nome: s.getNome, tipo: 'Serviço', quantidade: 0 };\n        });\n\n        this.empresa.getClientes.forEach(cliente => {\n            cliente.getProdutosConsumidos.forEach(produto => {\n                const key = `Produto-${produto.getNome}`;\n                if (contagem[key]) {\n                    contagem[key].quantidade++;\n                }\n            });\n            cliente.getServicosConsumidos.forEach(servico => {\n                const key = `Serviço-${servico.getNome}`;\n                if (contagem[key]) {\n                    contagem[key].quantidade++;\n                }\n            });\n        });\n        const ranking = Object.values(contagem)\n            .filter(item => item.quantidade > 0)\n            .sort((a, b) => b.quantidade - a.quantidade);\n        return ranking;\n    }\n\n    getRelatorioConsumoPorTipoRaca() {\n        const resultados: { tipoRaca: string, nome: string, tipo: 'Produto' | 'Serviço', quantidade: number }[] = [];\n        console.log(\"[Relatório Tipo/Raça] Iniciando geração do relatório...\");\n\n        this.empresa.getClientes.forEach(cliente => {\n            console.log(`[Relatório Tipo/Raça] Processando cliente: ${cliente.nome} (${cliente.getCpf.getValor})`);\n            cliente.getPets.forEach(pet => {\n                const tipo = pet.getTipo;\n                const raca = pet.getRaca;\n                \n                console.log(`  [Relatório Tipo/Raça] Pet: ${pet.getNome}, Tipo: '${tipo}', Raça: '${raca}'`);\n\n                if (!tipo || !raca || tipo.trim() === '' || raca.trim() === '') {\n                    console.warn(`[Relatório Tipo/Raça] Pulando Pet com tipo/raça indefinidos/vazios para cliente ${cliente.nome}: ${pet.getNome}`);\n                    return; \n                }\n\n                const tipoRaca = `${tipo} - ${raca}`;\n\n                cliente.getProdutosConsumidos.forEach(produto => {\n                    let encontrado = resultados.find(r => r.tipoRaca === tipoRaca && r.nome === produto.getNome && r.tipo === 'Produto');\n                    if (encontrado) {\n                        encontrado.quantidade++;\n                    } else {\n                        resultados.push({ tipoRaca, nome: produto.getNome, tipo: 'Produto', quantidade: 1 });\n                    }\n                    console.log(`    [Relatório Tipo/Raça] Consumo de Produto: ${produto.getNome} para ${tipoRaca}`);\n                });\n                cliente.getServicosConsumidos.forEach(servico => {\n                    let encontrado = resultados.find(r => r.tipoRaca === tipoRaca && r.nome === servico.getNome && r.tipo === 'Serviço');\n                    if (encontrado) {\n                        encontrado.quantidade++;\n                    } else {\n                        resultados.push({ tipoRaca, nome: servico.getNome, tipo: 'Serviço', quantidade: 1 });\n                    }\n                    console.log(`    [Relatório Tipo/Raça] Consumo de Serviço: ${servico.getNome} para ${tipoRaca}`);\n                });\n            });\n        });\n        \n        console.log(\"[Relatório Tipo/Raça] Resultados brutos:\", resultados);\n\n        const grupos: { [key: string]: { tipoRaca: string, nome: string, tipo: 'Produto' | 'Serviço', quantidade: number }[] } = {};\n        resultados.forEach(item => {\n            if (!grupos[item.tipoRaca]) grupos[item.tipoRaca] = [];\n            grupos[item.tipoRaca].push(item);\n        });\n        \n        console.log(\"[Relatório Tipo/Raça] Grupos formados:\", grupos);\n\n        const relatorioFinal: any[] = [];\n        Object.keys(grupos).sort().forEach(tipoRaca => {\n            grupos[tipoRaca].sort((a, b) => b.quantidade - a.quantidade).forEach(item => {\n                relatorioFinal.push(item);\n            });\n        });\n        \n        console.log(\"[Relatório Tipo/Raça] Relatório final (ordenado):\", relatorioFinal);\n        return relatorioFinal;\n    }\n\n    getRelatorioConsumoPorTipo() {\n        const resultados: { tipoPet: string, nomeItem: string, tipoItem: 'Produto' | 'Serviço', quantidade: number }[] = [];\n        console.log(\"[Relatório Tipo] Iniciando geração do relatório...\");\n\n        this.empresa.getClientes.forEach(cliente => {\n            console.log(`[Relatório Tipo] Processando cliente: ${cliente.nome} (${cliente.getCpf.getValor})`);\n            cliente.getPets.forEach(pet => {\n                const tipoPet = pet.getTipo;\n                \n                console.log(`  [Relatório Tipo] Pet: ${pet.getNome}, Tipo: '${tipoPet}'`);\n\n                if (!tipoPet || tipoPet.trim() === '') {\n                    console.warn(`[Relatório Tipo] Pulando Pet com tipo indefinido/vazio para cliente ${cliente.nome}: ${pet.getNome}`);\n                    return; \n                }\n\n                cliente.getProdutosConsumidos.forEach(produto => {\n                    let encontrado = resultados.find(r => r.tipoPet === tipoPet && r.nomeItem === produto.getNome && r.tipoItem === 'Produto');\n                    if (encontrado) {\n                        encontrado.quantidade++;\n                    } else {\n                        resultados.push({ tipoPet, nomeItem: produto.getNome, tipoItem: 'Produto', quantidade: 1 });\n                    }\n                    console.log(`    [Relatório Tipo] Consumo de Produto: ${produto.getNome} para ${tipoPet}`);\n                });\n                cliente.getServicosConsumidos.forEach(servico => {\n                    let encontrado = resultados.find(r => r.tipoPet === tipoPet && r.nomeItem === servico.getNome && r.tipoItem === 'Serviço');\n                    if (encontrado) {\n                        encontrado.quantidade++;\n                    } else {\n                        resultados.push({ tipoPet, nomeItem: servico.getNome, tipoItem: 'Serviço', quantidade: 1 });\n                    }\n                    console.log(`    [Relatório Tipo] Consumo de Serviço: ${servico.getNome} para ${tipoPet}`);\n                });\n            });\n        });\n\n        console.log(\"[Relatório Tipo] Resultados brutos:\", resultados);\n\n        const grupos: { [key: string]: { tipoPet: string, nomeItem: string, tipoItem: 'Produto' | 'Serviço', quantidade: number }[] } = {};\n        resultados.forEach(item => {\n            if (!grupos[item.tipoPet]) grupos[item.tipoPet] = [];\n            grupos[item.tipoPet].push(item);\n        });\n        \n        console.log(\"[Relatório Tipo] Grupos formados:\", grupos);\n\n        const relatorioFinal: any[] = [];\n        Object.keys(grupos).sort().forEach(tipoPet => {\n            grupos[tipoPet].sort((a, b) => b.quantidade - a.quantidade).forEach(item => {\n                relatorioFinal.push(item);\n            });\n        });\n        \n        console.log(\"[Relatório Tipo] Relatório final (ordenado):\", relatorioFinal);\n        return relatorioFinal;\n    }\n\n\n    //Dados Iniciais para Teste\n    private popularDadosIniciais(): void {\n        const cpf1 = new CPF(\"123.456.789-00\", new Date(2020, 0, 1));\n        const cliente1 = new Cliente(\"João da Silva\", \"João\", cpf1);\n        this.empresa.getClientes.push(cliente1);\n\n        const cpf2 = new CPF(\"987.654.321-00\", new Date(2021, 5, 15));\n        const cliente2 = new Cliente(\"Maria Souza\", \"Maria\", cpf2);\n        this.empresa.getClientes.push(cliente2);\n\n        const pet1 = new Pet(\"Rex\", \"Labrador\", \"Macho\", \"Cachorro\");\n        cliente1.getPets.push(pet1);\n        const pet2 = new Pet(\"Mia\", \"Persa\", \"Fêmea\", \"Gato\");\n        cliente2.getPets.push(pet2);\n        const pet3 = new Pet(\"Buddy\", \"Poodle\", \"Macho\", \"Cachorro\");\n        cliente1.getPets.push(pet3);\n\n\n        const prod1 = new Produto(\"Ração Premium\", 75.50, \"Ração de alta qualidade para cães\");\n        this.empresa.getProdutos.push(prod1);\n        const prod2 = new Produto(\"Brinquedo Mordedor\", 25.00, \"Brinquedo para cachorros\");\n        this.empresa.getProdutos.push(prod2);\n        const prod3 = new Produto(\"Coleira Anti-pulgas\", 50.00, \"Coleira para prevenir pulgas\");\n        this.empresa.getProdutos.push(prod3);\n\n\n        const serv1 = new Servico(\"Banho e Tosa\", 80.00, \"Serviço completo de higiene\");\n        this.empresa.getServicos.push(serv1);\n        const serv2 = new Servico(\"Consulta Veterinária\", 120.00, \"Atendimento médico para pets\");\n        this.empresa.getServicos.push(serv2);\n        const serv3 = new Servico(\"Vacinação\", 90.00, \"Aplicação de vacinas\");\n        this.empresa.getServicos.push(serv3);\n\n\n        cliente1.getProdutosConsumidos.push(prod1); \n        cliente1.getProdutosConsumidos.push(prod2); \n        cliente1.getServicosConsumidos.push(serv1); \n        cliente1.getServicosConsumidos.push(serv3); \n\n        cliente2.getProdutosConsumidos.push(prod1); \n        cliente2.getServicosConsumidos.push(serv2); \n        cliente2.getServicosConsumidos.push(serv2); \n\n        console.log(\"Dados iniciais populados.\");\n    }\n}\n\nconst empresaService = new EmpresaService();\nexport default empresaService;\n","/home/ramonads/3/atviii/src/componentes/clientes/listaCliente.tsx",["197"],[],"import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Cliente from \"../../modelo/cliente\";\n\ntype Props = {\n    tema: string;\n    seletorView: (novaTela: string, evento?: React.MouseEvent | React.FormEvent) => void;\n    selecionarViewComItem: (novaTela: string, item: any, evento?: React.MouseEvent | React.FormEvent) => void;\n    clientes: Cliente[];\n    atualizarDados: () => void;\n};\n\nexport default function ListaClientes(props: Props) { //\n    const { tema, seletorView, selecionarViewComItem, clientes } = props; //\n\n    return (\n        <div className=\"container-fluid\">\n            <h2>Lista de Clientes</h2>\n            <table className=\"table table-striped\">\n                <thead>\n                    <tr>\n                        <th>Nome</th>\n                        <th>Nome Social</th>\n                        <th>CPF</th>\n                        <th>Ações</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {clientes.length > 0 ? (\n                        clientes.map(cliente => (\n                            <tr key={cliente.getCpf.getValor}>\n                                <td>{cliente.nome}</td>\n                                <td>{cliente.nomeSocial}</td>\n                                <td>{cliente.getCpf.getValor}</td>\n                                <td>\n                                    <button\n                                        className=\"btn btn-sm btn-primary me-2\"\n                                        onClick={(e) => selecionarViewComItem('Atualizar Cliente', cliente, e)}\n                                    >\n                                        Editar\n                                    </button>\n                                    <button\n                                        className=\"btn btn-sm btn-danger\"\n                                        onClick={(e) => selecionarViewComItem('Excluir Cliente', cliente, e)}\n                                    >\n                                        Excluir\n                                    </button>\n                                </td>\n                            </tr>\n                        ))\n                    ) : (\n                        <tr>\n                            <td colSpan={4}>Nenhum cliente cadastrado.</td>\n                        </tr>\n                    )}\n                </tbody>\n            </table>\n            <button\n                className=\"btn btn-success mt-3\"\n                onClick={(e) => seletorView('Cadastrar Cliente', e)}\n            >\n                Cadastrar Novo Cliente\n            </button>\n        </div>\n    );\n}\n","/home/ramonads/3/atviii/src/componentes/clientes/formularioAtualizacaoCliente.tsx",["198"],[],"import React, { useState, useEffect } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Cliente from '../../modelo/cliente';\n\ntype Props = {\n    tema: string;\n    seletorView: (novaTela: string, evento?: React.MouseEvent | React.FormEvent) => void;\n    cliente: Cliente; \n    atualizarCliente: (cpfCliente: string, novoNome: string, novoNomeSocial: string) => void;\n    atualizarDados: () => void;\n};\n\nexport default function FormularioAtualizacaoCliente(props: Props) {\n    const [nome, setNome] = useState<string>(props.cliente ? props.cliente.nome : '');\n    const [nomeSocial, setNomeSocial] = useState<string>(props.cliente ? props.cliente.nomeSocial : '');\n\n\n    useEffect(() => {\n        if (props.cliente) {\n            setNome(props.cliente.nome);\n            setNomeSocial(props.cliente.nomeSocial);\n        }\n    }, [props.cliente]); \n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { name, value } = event.target;\n        if (name === \"nome\") setNome(value);\n        else if (name === \"nomeSocial\") setNomeSocial(value);\n    };\n\n    const handleSubmit = (event: React.FormEvent) => {\n        event.preventDefault();\n        if (!props.cliente) {\n            console.warn(\"Nenhum cliente selecionado para atualização.\");\n            return;\n        }\n\n        const cpfCliente = props.cliente.getCpf.getValor;\n\n        props.atualizarCliente(cpfCliente, nome, nomeSocial);\n        props.atualizarDados(); \n\n        props.seletorView('Clientes', event); \n    };\n\n    const { tema, seletorView, cliente } = props;\n\n    if (!cliente) {\n        return (\n            <div className=\"container-fluid\">\n                <h2>Atualizar Cliente</h2>\n                <p className=\"alert alert-warning\">Nenhum cliente selecionado para atualização. Por favor, volte para a lista de clientes e selecione um.</p>\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={(e) => seletorView('Clientes', e)}>Voltar</button>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"container-fluid\">\n            <h2>Atualizar Cliente: {cliente.nome}</h2>\n            <form onSubmit={handleSubmit}>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"nome\" className=\"form-label\">Nome</label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"nome\"\n                        name=\"nome\"\n                        value={nome}\n                        onChange={handleChange}\n                        required\n                    />\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"nomeSocial\" className=\"form-label\">Nome Social</label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"nomeSocial\"\n                        name=\"nomeSocial\"\n                        value={nomeSocial}\n                        onChange={handleChange}\n                    />\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"cpf\" className=\"form-label\">CPF (Não Editável)</label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"cpf\"\n                        name=\"cpf\"\n                        value={cliente.getCpf.getValor}\n                        readOnly\n                        disabled\n                    />\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary me-2\">Atualizar</button>\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={(e) => seletorView('Clientes', e)}>Cancelar</button>\n            </form>\n        </div>\n    );\n}\n","/home/ramonads/3/atviii/src/componentes/clientes/formularioCadastroCliente.tsx",["199","200"],[],"import React, { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Cliente from \"../../modelo/cliente\";\n\ntype Props = {\n    tema: string;\n    seletorView: (novaTela: string, evento?: React.MouseEvent | React.FormEvent) => void;\n    cadastrarCliente: (nome: string, nomeSocial: string, cpfValor: string, dataEmissaoString: string) => void;\n    atualizarDados: () => void;\n};\n\nexport default function FormularioCadastroCliente(props: Props) {\n    const [nome, setNome] = useState<string>('');\n    const [nomeSocial, setNomeSocial] = useState<string>('');\n    const [cpf, setCpf] = useState<string>('');\n    const [dataEmissaoCpf, setDataEmissaoCpf] = useState<string>('');\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const { name, value } = event.target;\n        if (name === \"nome\") setNome(value);\n        else if (name === \"nomeSocial\") setNomeSocial(value);\n        else if (name === \"cpf\") setCpf(value);\n        else if (name === \"dataEmissaoCpf\") setDataEmissaoCpf(value);\n    };\n\n    const handleSubmit = (event: React.FormEvent) => {\n        event.preventDefault();\n\n        if (!nome || !cpf || !dataEmissaoCpf) {\n            console.warn(\"Por favor, preencha todos os campos obrigatórios.\");\n            return;\n        }\n\n        props.cadastrarCliente(nome, nomeSocial, cpf, dataEmissaoCpf);\n        props.atualizarDados();\n\n        props.seletorView('Clientes', event);\n    };\n\n    const { tema, seletorView } = props;\n\n    return (\n        <div className=\"container-fluid\">\n            <h2>Cadastro de Cliente</h2>\n            <form onSubmit={handleSubmit}>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"nome\" className=\"form-label\">Nome</label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"nome\"\n                        name=\"nome\"\n                        value={nome}\n                        onChange={handleChange}\n                        required\n                    />\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"nomeSocial\" className=\"form-label\">Nome Social</label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"nomeSocial\"\n                        name=\"nomeSocial\"\n                        value={nomeSocial}\n                        onChange={handleChange}\n                    />\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"cpf\" className=\"form-label\">CPF</label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"cpf\"\n                        name=\"cpf\"\n                        value={cpf}\n                        onChange={handleChange}\n                        placeholder=\"Ex: 123.456.789-00\"\n                        required\n                    />\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"dataEmissaoCpf\" className=\"form-label\">Data de Emissão do CPF (dd/mm/yyyy)</label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"dataEmissaoCpf\"\n                        name=\"dataEmissaoCpf\"\n                        value={dataEmissaoCpf}\n                        onChange={handleChange}\n                        placeholder=\"Ex: 01/01/2020\"\n                        required\n                    />\n                </div>\n                <button type=\"submit\" className=\"btn btn-success me-2\">Cadastrar</button>\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={(e) => seletorView('Clientes', e)}>Voltar</button>\n            </form>\n        </div>\n    );\n}\n","/home/ramonads/3/atviii/src/componentes/clientes/confirmacaoExclusaoCliente.tsx",["201","202"],[],"import React from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Cliente from '../../modelo/cliente';\n\ntype Props = {\n    tema: string;\n    seletorView: (novaTela: string, evento?: React.MouseEvent | React.FormEvent) => void;\n    cliente: Cliente; \n    excluirCliente: (cpfCliente: string) => void;\n    atualizarDados: () => void;\n};\n\nexport default function ConfirmacaoExclusaoCliente(props: Props) {\n    const handleExcluir = (event: React.MouseEvent) => {\n        event.preventDefault();\n        if (!props.cliente) {\n            console.warn(\"Nenhum cliente selecionado para exclusão.\");\n            return;\n        }\n\n        const cpfCliente = props.cliente.getCpf.getValor;\n        const nomeCliente = props.cliente.nome;\n\n        props.excluirCliente(cpfCliente);\n        props.atualizarDados();\n\n        props.seletorView('Clientes', event);\n    };\n\n    const { tema, seletorView, cliente } = props;\n\n    if (!cliente) {\n        return (\n            <div className=\"container-fluid\">\n                <h2>Excluir Cliente</h2>\n                <p className=\"alert alert-warning\">Nenhum cliente selecionado para exclusão. Por favor, volte para a lista de clientes e selecione um.</p>\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={(e) => seletorView('Clientes', e)}>Voltar</button>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"container-fluid\">\n            <h2>Confirmar Exclusão de Cliente</h2>\n            <div className=\"alert alert-warning\" role=\"alert\">\n                Você tem certeza que deseja excluir o cliente: <strong>{cliente.nome}</strong> (CPF: {cliente.getCpf.getValor})?\n            </div>\n            <button\n                type=\"button\"\n                className=\"btn btn-danger me-2\"\n                onClick={handleExcluir}\n            >\n                Sim, Excluir\n            </button>\n            <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                onClick={(e) => seletorView('Clientes', e)}\n            >\n                Cancelar\n            </button>\n        </div>\n    );\n}\n","/home/ramonads/3/atviii/src/componentes/pets/FormularioCadastroPet.tsx",["203"],[],"import React, { useState } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Cliente from '../../modelo/cliente';\n\ntype Props = {\n    tema: string;\n    seletorView: (novaTela: string, evento?: React.MouseEvent | React.FormEvent) => void;\n    cadastrarPet: (cpfCliente: string, nome: string, tipo: string, raca: string, genero: string) => void;\n    clientes: Cliente[]; \n    atualizarDados: () => void;\n};\n\nexport default function FormularioCadastroPet(props: Props) {\n    const [nome, setNome] = useState<string>('');\n    const [tipo, setTipo] = useState<string>('');\n    const [raca, setRaca] = useState<string>('');\n    const [genero, setGenero] = useState<string>('');\n    const [cpfCliente, setCpfCliente] = useState<string>('');\n\n    const { clientes } = props; \n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n        const { name, value } = event.target;\n        if (name === \"nome\") setNome(value);\n        else if (name === \"tipo\") setTipo(value);\n        else if (name === \"raca\") setRaca(value);\n        else if (name === \"genero\") setGenero(value);\n        else if (name === \"cpfCliente\") setCpfCliente(value);\n    };\n\n    const handleSubmit = (event: React.FormEvent) => {\n        event.preventDefault();\n        if (!nome || !tipo || !raca || !genero || !cpfCliente) {\n            console.warn(\"Por favor, preencha todos os campos do pet e selecione o cliente dono.\");\n            return;\n        }\n\n        props.cadastrarPet(cpfCliente, nome, tipo, raca, genero);\n        props.atualizarDados();\n\n        props.seletorView('Pets', event);\n    };\n\n    const { tema, seletorView } = props;\n\n    return (\n        <div className=\"container-fluid\">\n            <h2>Cadastro de Pet</h2>\n            <form onSubmit={handleSubmit}>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"nome\" className=\"form-label\">Nome do Pet</label>\n                    <input type=\"text\" className=\"form-control\" id=\"nome\" name=\"nome\" value={nome} onChange={handleChange} required />\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"tipo\" className=\"form-label\">Tipo</label>\n                    <input type=\"text\" className=\"form-control\" id=\"tipo\" name=\"tipo\" value={tipo} onChange={handleChange} required />\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"raca\" className=\"form-label\">Raça</label>\n                    <input type=\"text\" className=\"form-control\" id=\"raca\" name=\"raca\" value={raca} onChange={handleChange} required />\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"genero\" className=\"form-label\">Gênero</label>\n                    <select className=\"form-select\" id=\"genero\" name=\"genero\" value={genero} onChange={handleChange} required>\n                        <option value=\"\">Selecione...</option>\n                        <option value=\"Macho\">Macho</option>\n                        <option value=\"Fêmea\">Fêmea</option>\n                    </select>\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"cpfCliente\" className=\"form-label\">CPF do Cliente Dono</label>\n                    <select\n                        className=\"form-select\"\n                        id=\"cpfCliente\"\n                        name=\"cpfCliente\"\n                        value={cpfCliente}\n                        onChange={handleChange}\n                        required\n                    >\n                        <option value=\"\">Selecione o dono...</option>\n                        {clientes.map(cliente => (\n                            <option key={cliente.getCpf.getValor} value={cliente.getCpf.getValor}>\n                                {cliente.nome} ({cliente.getCpf.getValor})\n                            </option>\n                        ))}\n                    </select>\n                </div>\n                <button type=\"submit\" className=\"btn btn-success me-2\">Cadastrar</button>\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={(e) => seletorView('Pets', e)}>Voltar</button>\n            </form>\n        </div>\n    );\n}\n","/home/ramonads/3/atviii/src/componentes/pets/FormularioAtualizacaoPet.tsx",["204","205"],[],"import React, { useState, useEffect } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Pet from '../../modelo/pet';\n\ntype PetDataComCliente = {\n    nome: string;\n    tipo: string;\n    raca: string;\n    genero: string;\n    cpfCliente: string;\n};\n\ntype Props = {\n    tema: string;\n    seletorView: (novaTela: string, evento?: React.MouseEvent | React.FormEvent) => void;\n    pet: PetDataComCliente; \n    atualizarPet: (cpfClienteOriginal: string, nomePetOriginal: string, novoNome: string, novoTipo: string, novaRaca: string, novoGenero: string) => void;\n    atualizarDados: () => void;\n};\n\nexport default function FormularioAtualizacaoPet(props: Props) {\n    const [nome, setNome] = useState<string>(props.pet ? props.pet.nome : '');\n    const [tipo, setTipo] = useState<string>(props.pet ? props.pet.tipo : '');\n    const [raca, setRaca] = useState<string>(props.pet ? props.pet.raca : '');\n    const [genero, setGenero] = useState<string>(props.pet ? props.pet.genero : '');\n\n    useEffect(() => {\n        if (props.pet) {\n            setNome(props.pet.nome);\n            setTipo(props.pet.tipo);\n            setRaca(props.pet.raca);\n            setGenero(props.pet.genero);\n        }\n    }, [props.pet]);\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n        const { name, value } = event.target;\n        if (name === \"nome\") setNome(value);\n        else if (name === \"tipo\") setTipo(value);\n        else if (name === \"raca\") setRaca(value);\n        else if (name === \"genero\") setGenero(value);\n    };\n\n    const handleSubmit = (event: React.FormEvent) => {\n        event.preventDefault();\n        if (!props.pet) {\n            console.warn(\"Nenhum pet selecionado para atualização.\");\n            return;\n        }\n\n        const { pet } = props;\n        props.atualizarPet(pet.cpfCliente, pet.nome, nome, tipo, raca, genero);\n        props.atualizarDados();\n\n        props.seletorView('Pets', event);\n    };\n\n    const { tema, seletorView, pet } = props;\n\n    if (!pet) {\n        return (\n            <div className=\"container-fluid\">\n                <h2>Atualizar Pet</h2>\n                <p className=\"alert alert-warning\">Nenhum pet selecionado para atualização. Por favor, volte para a lista de pets e selecione um.</p>\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={(e) => seletorView('Pets', e)}>Voltar</button>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"container-fluid\">\n            <h2>Atualizar Pet: {pet.nome}</h2>\n            <form onSubmit={handleSubmit}>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"nome\" className=\"form-label\">Nome do Pet</label>\n                    <input type=\"text\" className=\"form-control\" id=\"nome\" name=\"nome\" value={nome} onChange={handleChange} required />\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"tipo\" className=\"form-label\">Tipo</label>\n                    <input type=\"text\" className=\"form-control\" id=\"tipo\" name=\"tipo\" value={tipo} onChange={handleChange} required />\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"raca\" className=\"form-label\">Raça</label>\n                    <input type=\"text\" className=\"form-control\" id=\"raca\" name=\"raca\" value={raca} onChange={handleChange} required />\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"genero\" className=\"form-label\">Gênero</label>\n                    <select className=\"form-select\" id=\"genero\" name=\"genero\" value={genero} onChange={handleChange} required>\n                        <option value=\"\">Selecione...</option>\n                        <option value=\"Macho\">Macho</option>\n                        <option value=\"Fêmea\">Fêmea</option>\n                    </select>\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"cpfCliente\" className=\"form-label\">CPF do Cliente Dono (Não Editável)</label>\n                    <input type=\"text\" className=\"form-control\" id=\"cpfCliente\" name=\"cpfCliente\" value={pet.cpfCliente} readOnly disabled />\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary me-2\">Atualizar</button>\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={(e) => seletorView('Pets', e)}>Cancelar</button>\n            </form>\n        </div>\n    );\n}\n","/home/ramonads/3/atviii/src/componentes/pets/ConfirmacaoExclusaoPet.tsx",["206","207"],[],"import React from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Pet from '../../modelo/pet';\n\ntype PetDataComCliente = {\n    nome: string;\n    tipo: string;\n    raca: string;\n    genero: string;\n    cpfCliente: string;\n};\n\ntype Props = {\n    tema: string;\n    seletorView: (novaTela: string, evento?: React.MouseEvent | React.FormEvent) => void;\n    pet: PetDataComCliente; \n    excluirPet: (cpfCliente: string, nomePet: string) => void;\n    atualizarDados: () => void;\n};\n\nexport default function ConfirmacaoExclusaoPet(props: Props) {\n    const handleExcluir = (event: React.MouseEvent) => {\n        event.preventDefault();\n        if (!props.pet) {\n            console.warn(\"Nenhum pet selecionado para exclusão.\");\n            return;\n        }\n\n        const { pet } = props;\n        props.excluirPet(pet.cpfCliente, pet.nome);\n        props.atualizarDados();\n\n        props.seletorView('Pets', event);\n    };\n\n    const { tema, seletorView, pet } = props;\n\n    if (!pet) {\n        return (\n            <div className=\"container-fluid\">\n                <h2>Excluir Pet</h2>\n                <p className=\"alert alert-warning\">Nenhum pet selecionado para exclusão. Por favor, volte para a lista de pets e selecione um.</p>\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={(e) => seletorView('Pets', e)}>Voltar</button>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"container-fluid\">\n            <h2>Confirmar Exclusão de Pet</h2>\n            <div className=\"alert alert-warning\" role=\"alert\">\n                Você tem certeza que deseja excluir o pet: <strong>{pet.nome}</strong> (Tipo: {pet.tipo}, Raça: {pet.raca}) do cliente com CPF: {pet.cpfCliente}?\n            </div>\n            <button\n                type=\"button\"\n                className=\"btn btn-danger me-2\"\n                onClick={handleExcluir}\n            >\n                Sim, Excluir\n            </button>\n            <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                onClick={(e) => seletorView('Pets', e)}\n            >\n                Cancelar\n            </button>\n        </div>\n    );\n}\n","/home/ramonads/3/atviii/src/componentes/pets/ListaPets.tsx",["208","209"],[],"import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Cliente from \"../../modelo/cliente\";\n\ntype PetDataComCliente = {\n    nome: string;\n    tipo: string;\n    raca: string;\n    genero: string;\n    cpfCliente: string; \n};\n\ntype Props = {\n    tema: string;\n    seletorView: (novaTela: string, evento?: React.MouseEvent | React.FormEvent) => void;\n    selecionarViewComItem: (novaTela: string, item: any, evento?: React.MouseEvent | React.FormEvent) => void;\n    pets: PetDataComCliente[]; \n    atualizarDados: () => void;\n};\n\nexport default function ListaPets(props: Props) {\n    const { tema, seletorView, selecionarViewComItem, pets } = props;\n\n    return (\n        <div className=\"container-fluid\">\n            <h2>Lista de Pets</h2>\n            <table className=\"table table-striped\">\n                <thead>\n                    <tr>\n                        <th>Nome</th>\n                        <th>Tipo</th>\n                        <th>Raça</th>\n                        <th>Gênero</th>\n                        <th>CPF do Dono</th>\n                        <th>Ações</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {pets.length > 0 ? (\n                        pets.map((pet, index) => (\n                            <tr key={`${pet.cpfCliente}-${pet.nome}-${index}`}> \n                                <td>{pet.nome}</td>\n                                <td>{pet.tipo}</td>\n                                <td>{pet.raca}</td>\n                                <td>{pet.genero}</td>\n                                <td>{pet.cpfCliente}</td>\n                                <td>\n                                    <button\n                                        className=\"btn btn-sm btn-primary me-2\"\n                                        onClick={(e) => selecionarViewComItem('Atualizar Pet', pet, e)}\n                                    >\n                                        Editar\n                                    </button>\n                                    <button\n                                        className=\"btn btn-sm btn-danger\"\n                                        onClick={(e) => selecionarViewComItem('Excluir Pet', pet, e)}\n                                    >\n                                        Excluir\n                                    </button>\n                                </td>\n                            </tr>\n                        ))\n                    ) : (\n                        <tr>\n                            <td colSpan={6}>Nenhum pet cadastrado.</td>\n                        </tr>\n                    )}\n                </tbody>\n            </table>\n            <button\n                className=\"btn btn-success mt-3\"\n                onClick={(e) => seletorView('Cadastrar Pet', e)}\n            >\n                Cadastrar Novo Pet\n            </button>\n        </div>\n    );\n}\n","/home/ramonads/3/atviii/src/componentes/produtos/ListaProdutos.tsx",["210"],[],"import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Produto from \"../../modelo/produto\";\n\ntype Props = {\n    tema: string;\n    seletorView: (novaTela: string, evento?: React.MouseEvent | React.FormEvent) => void;\n    selecionarViewComItem: (novaTela: string, item: any, evento?: React.MouseEvent | React.FormEvent) => void;\n    produtos: Produto[];\n    atualizarDados: () => void;\n};\n\nexport default function ListaProdutos(props: Props) {\n    const { tema, seletorView, selecionarViewComItem, produtos } = props;\n\n    return (\n        <div className=\"container-fluid\">\n            <h2>Lista de Produtos</h2>\n            <table className=\"table table-striped\">\n                <thead>\n                    <tr>\n                        <th>Nome</th>\n                        <th>Valor</th>\n                        <th>Descrição</th>\n                        <th>Ações</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {produtos.length > 0 ? (\n                        produtos.map((produto, index) => (\n                            <tr key={`${produto.getNome}-${index}`}>\n                                <td>{produto.getNome}</td>\n                                <td>R$ {produto.getValor.toFixed(2)}</td>\n                                <td>{produto.getDescricao}</td>\n                                <td>\n                                    <button\n                                        className=\"btn btn-sm btn-primary me-2\"\n                                        onClick={(e) => selecionarViewComItem('Atualizar Produto', produto, e)}\n                                    >\n                                        Editar\n                                    </button>\n                                    <button\n                                        className=\"btn btn-sm btn-danger\"\n                                        onClick={(e) => selecionarViewComItem('Excluir Produto', produto, e)}\n                                    >\n                                        Excluir\n                                    </button>\n                                </td>\n                            </tr>\n                        ))\n                    ) : (\n                        <tr>\n                            <td colSpan={4}>Nenhum produto cadastrado.</td>\n                        </tr>\n                    )}\n                </tbody>\n            </table>\n            <button\n                className=\"btn btn-success mt-3\"\n                onClick={(e) => seletorView('Cadastrar Produto', e)}\n            >\n                Cadastrar Novo Produto\n            </button>\n        </div>\n    );\n}\n","/home/ramonads/3/atviii/src/componentes/produtos/FormularioCadastroProduto.tsx",["211"],[],"import React, { useState } from \"react\"; \nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\ntype Props = {\n    tema: string;\n    seletorView: (novaTela: string, evento?: React.MouseEvent | React.FormEvent) => void;\n    cadastrarProduto: (nome: string, valor: number, descricao: string) => void;\n    atualizarDados: () => void;\n};\n\nexport default function FormularioCadastroProduto(props: Props) {\n    const [nome, setNome] = useState<string>('');\n    const [valor, setValor] = useState<string>('');\n    const [descricao, setDescricao] = useState<string>('');\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        const { name, value } = event.target;\n        if (name === \"nome\") setNome(value);\n        else if (name === \"valor\") setValor(value);\n        else if (name === \"descricao\") setDescricao(value);\n    };\n\n    const handleSubmit = (event: React.FormEvent) => {\n        event.preventDefault();\n        const valorNumerico = parseFloat(valor);\n\n        if (!nome || isNaN(valorNumerico) || valorNumerico < 0) {\n            alert(\"Por favor, preencha o nome e um valor numérico válido para o produto.\");\n            return;\n        }\n\n        props.cadastrarProduto(nome, valorNumerico, descricao);\n        props.atualizarDados();\n\n        props.seletorView('Produtos', event);\n    };\n\n    const { tema, seletorView } = props;\n\n    return (\n        <div className=\"container-fluid\">\n            <h2>Cadastro de Produto</h2>\n            <form onSubmit={handleSubmit}>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"nome\" className=\"form-label\">Nome do Produto</label>\n                    <input type=\"text\" className=\"form-control\" id=\"nome\" name=\"nome\" value={nome} onChange={handleChange} required />\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"valor\" className=\"form-label\">Valor (R$)</label>\n                    <input type=\"number\" step=\"0.01\" className=\"form-control\" id=\"valor\" name=\"valor\" value={valor} onChange={handleChange} required />\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"descricao\" className=\"form-label\">Descrição</label>\n                    <textarea className=\"form-control\" id=\"descricao\" name=\"descricao\" value={descricao} onChange={handleChange} rows={3}></textarea>\n                </div>\n                <button type=\"submit\" className=\"btn btn-success me-2\">Cadastrar</button>\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={(e) => seletorView('Produtos', e)}>Voltar</button>\n            </form>\n        </div>\n    );\n}\n","/home/ramonads/3/atviii/src/componentes/produtos/FormularioAtualizacaoProduto.tsx",["212","213"],[],"import React, { useState, useEffect } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Produto from '../../modelo/produto';\n\ntype Props = {\n    tema: string;\n    seletorView: (novaTela: string, evento?: React.MouseEvent | React.FormEvent) => void;\n    produto: Produto;\n    atualizarProduto: (nomeProdutoOriginal: string, novoNome: string, novoValor: number, novaDescricao: string) => void;\n    atualizarDados: () => void;\n};\n\ntype State = {\n    nome: string;\n    valor: string;\n    descricao: string;\n};\n\nexport default function FormularioAtualizacaoProduto(props: Props) {\n    const [nome, setNome] = useState<string>(props.produto ? props.produto.getNome : '');\n    const [valor, setValor] = useState<string>(props.produto ? props.produto.getValor.toFixed(2) : '');\n    const [descricao, setDescricao] = useState<string>(props.produto ? props.produto.getDescricao : '');\n\n    useEffect(() => {\n        if (props.produto) {\n            setNome(props.produto.getNome);\n            setValor(props.produto.getValor.toFixed(2));\n            setDescricao(props.produto.getDescricao);\n        }\n    }, [props.produto]);\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        const { name, value } = event.target;\n        if (name === \"nome\") setNome(value);\n        else if (name === \"valor\") setValor(value);\n        else if (name === \"descricao\") setDescricao(value);\n    };\n\n    const handleSubmit = (event: React.FormEvent) => {\n        event.preventDefault();\n        if (!props.produto) {\n            console.warn(\"Nenhum produto selecionado para atualização.\");\n            return;\n        }\n\n        const valorNumerico = parseFloat(valor);\n\n        if (!nome || isNaN(valorNumerico) || valorNumerico < 0) {\n            alert(\"Por favor, preencha o nome e um valor numérico válido para o produto.\");\n            return;\n        }\n\n        props.atualizarProduto(props.produto.getNome, nome, valorNumerico, descricao);\n        props.atualizarDados();\n\n        props.seletorView('Produtos', event);\n    };\n\n    const { tema, seletorView, produto } = props;\n\n    if (!produto) {\n        return (\n            <div className=\"container-fluid\">\n                <h2>Atualizar Produto</h2>\n                <p className=\"alert alert-warning\">Nenhum produto selecionado para atualização. Por favor, volte para a lista de produtos e selecione um.</p>\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={(e) => seletorView('Produtos', e)}>Voltar</button>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"container-fluid\">\n            <h2>Atualizar Produto: {produto.getNome}</h2>\n            <form onSubmit={handleSubmit}>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"nome\" className=\"form-label\">Nome do Produto</label>\n                    <input type=\"text\" className=\"form-control\" id=\"nome\" name=\"nome\" value={nome} onChange={handleChange} required />\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"valor\" className=\"form-label\">Valor (R$)</label>\n                    <input type=\"number\" step=\"0.01\" className=\"form-control\" id=\"valor\" name=\"valor\" value={valor} onChange={handleChange} required />\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"descricao\" className=\"form-label\">Descrição</label>\n                    <textarea className=\"form-control\" id=\"descricao\" name=\"descricao\" value={descricao} onChange={handleChange} rows={3}></textarea>\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary me-2\">Atualizar</button>\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={(e) => seletorView('Produtos', e)}>Cancelar</button>\n            </form>\n        </div>\n    );\n}\n","/home/ramonads/3/atviii/src/componentes/produtos/ConfirmacaoExclusaoProduto.tsx",["214"],[],"import React from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Produto from '../../modelo/produto';\n\ntype Props = {\n    tema: string;\n    seletorView: (novaTela: string, evento?: React.MouseEvent | React.FormEvent) => void;\n    produto: Produto;\n    excluirProduto: (nomeProduto: string) => void;\n    atualizarDados: () => void;\n};\n\nexport default function ConfirmacaoExclusaoProduto(props: Props) {\n    const handleExcluir = (event: React.MouseEvent) => {\n        event.preventDefault();\n        if (!props.produto) {\n            console.warn(\"Nenhum produto selecionado para exclusão.\");\n            return;\n        }\n\n        const nomeProduto = props.produto.getNome;\n        props.excluirProduto(nomeProduto);\n        props.atualizarDados();\n\n        props.seletorView('Produtos', event);\n    };\n\n    const { tema, seletorView, produto } = props;\n\n    if (!produto) {\n        return (\n            <div className=\"container-fluid\">\n                <h2>Excluir Produto</h2>\n                <p className=\"alert alert-warning\">Nenhum produto selecionado para exclusão. Por favor, volte para a lista de produtos e selecione um.</p>\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={(e) => seletorView('Produtos', e)}>Voltar</button>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"container-fluid\">\n            <h2>Confirmar Exclusão de Produto</h2>\n            <div className=\"alert alert-warning\" role=\"alert\">\n                Você tem certeza que deseja excluir o produto: <strong>{produto.getNome}</strong> (Valor: R$ {produto.getValor.toFixed(2)}, Descrição: {produto.getDescricao})?\n            </div>\n            <button\n                type=\"button\"\n                className=\"btn btn-danger me-2\"\n                onClick={handleExcluir}\n            >\n                Sim, Excluir\n            </button>\n            <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                onClick={(e) => seletorView('Produtos', e)}\n            >\n                Cancelar\n            </button>\n        </div>\n    );\n}\n","/home/ramonads/3/atviii/src/componentes/servicos/FormularioCadastroServico.tsx",["215"],[],"import React, { useState } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\ntype Props = {\n    tema: string;\n    seletorView: (novaTela: string, evento?: React.MouseEvent | React.FormEvent) => void;\n    cadastrarServico: (nome: string, valor: number, descricao: string) => void;\n    atualizarDados: () => void;\n};\n\nexport default function FormularioCadastroServico(props: Props) {\n    const [nome, setNome] = useState<string>('');\n    const [valor, setValor] = useState<string>('');\n    const [descricao, setDescricao] = useState<string>('');\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        const { name, value } = event.target;\n        if (name === \"nome\") setNome(value);\n        else if (name === \"valor\") setValor(value);\n        else if (name === \"descricao\") setDescricao(value);\n    };\n\n    const handleSubmit = (event: React.FormEvent) => {\n        event.preventDefault();\n        const valorNumerico = parseFloat(valor);\n\n        if (!nome || isNaN(valorNumerico) || valorNumerico < 0) {\n            alert(\"Por favor, preencha o nome e um valor numérico válido para o serviço.\");\n            return;\n        }\n\n        props.cadastrarServico(nome, valorNumerico, descricao);\n        props.atualizarDados();\n\n        props.seletorView('Serviços', event);\n    };\n\n    const { tema, seletorView } = props;\n\n    return (\n        <div className=\"container-fluid\">\n            <h2>Cadastro de Serviço</h2>\n            <form onSubmit={handleSubmit}>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"nome\" className=\"form-label\">Nome do Serviço</label>\n                    <input type=\"text\" className=\"form-control\" id=\"nome\" name=\"nome\" value={nome} onChange={handleChange} required />\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"valor\" className=\"form-label\">Valor (R$)</label>\n                    <input type=\"number\" step=\"0.01\" className=\"form-control\" id=\"valor\" name=\"valor\" value={valor} onChange={handleChange} required />\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"descricao\" className=\"form-label\">Descrição</label>\n                    <textarea className=\"form-control\" id=\"descricao\" name=\"descricao\" value={descricao} onChange={handleChange} rows={3}></textarea>\n                </div>\n                <button type=\"submit\" className=\"btn btn-success me-2\">Cadastrar</button>\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={(e) => seletorView('Serviços', e)}>Voltar</button>\n            </form>\n        </div>\n    );\n}\n","/home/ramonads/3/atviii/src/componentes/servicos/ListaServicos.tsx",["216"],[],"import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Servico from \"../../modelo/servico\";\n\ntype Props = {\n    tema: string;\n    seletorView: (novaTela: string, evento?: React.MouseEvent | React.FormEvent) => void;\n    selecionarViewComItem: (novaTela: string, item: any, evento?: React.MouseEvent | React.FormEvent) => void;\n    servicos: Servico[];\n    atualizarDados: () => void;\n};\n\nexport default function ListaServicos(props: Props) {\n    const { tema, seletorView, selecionarViewComItem, servicos } = props;\n\n    return (\n        <div className=\"container-fluid\">\n            <h2>Lista de Serviços</h2>\n            <table className=\"table table-striped\">\n                <thead>\n                    <tr>\n                        <th>Nome</th>\n                        <th>Valor</th>\n                        <th>Descrição</th>\n                        <th>Ações</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {servicos.length > 0 ? (\n                        servicos.map((servico, index) => (\n                            <tr key={`${servico.getNome}-${index}`}>\n                                <td>{servico.getNome}</td>\n                                <td>R$ {servico.getValor.toFixed(2)}</td>\n                                <td>{servico.getDescricao}</td>\n                                <td>\n                                    <button\n                                        className=\"btn btn-sm btn-primary me-2\"\n                                        onClick={(e) => selecionarViewComItem('Atualizar Serviço', servico, e)}\n                                    >\n                                        Editar\n                                    </button>\n                                    <button\n                                        className=\"btn btn-sm btn-danger\"\n                                        onClick={(e) => selecionarViewComItem('Excluir Serviço', servico, e)}\n                                    >\n                                        Excluir\n                                    </button>\n                                </td>\n                            </tr>\n                        ))\n                    ) : (\n                        <tr>\n                            <td colSpan={4}>Nenhum serviço cadastrado.</td>\n                        </tr>\n                    )}\n                </tbody>\n            </table>\n            <button\n                className=\"btn btn-success mt-3\"\n                onClick={(e) => seletorView('Cadastrar Serviço', e)}\n            >\n                Cadastrar Novo Serviço\n            </button>\n        </div>\n    );\n}","/home/ramonads/3/atviii/src/componentes/servicos/FormularioAtualizacaoServico.tsx",["217","218"],[],"import React, { useState, useEffect } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Servico from '../../modelo/servico';\n\ntype Props = {\n    tema: string;\n    seletorView: (novaTela: string, evento?: React.MouseEvent | React.FormEvent) => void;\n    servico: Servico;\n    atualizarServico: (nomeServicoOriginal: string, novoNome: string, novoValor: number, novaDescricao: string) => void;\n    atualizarDados: () => void;\n};\n\ntype State = {\n    nome: string;\n    valor: string; \n    descricao: string;\n};\n\nexport default function FormularioAtualizacaoServico(props: Props) {\n    const [nome, setNome] = useState<string>(props.servico ? props.servico.getNome : '');\n    const [valor, setValor] = useState<string>(props.servico ? props.servico.getValor.toFixed(2) : '');\n    const [descricao, setDescricao] = useState<string>(props.servico ? props.servico.getDescricao : '');\n\n    useEffect(() => {\n        if (props.servico) {\n            setNome(props.servico.getNome);\n            setValor(props.servico.getValor.toFixed(2));\n            setDescricao(props.servico.getDescricao);\n        }\n    }, [props.servico]);\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        const { name, value } = event.target;\n        if (name === \"nome\") setNome(value);\n        else if (name === \"valor\") setValor(value);\n        else if (name === \"descricao\") setDescricao(value);\n    };\n\n    const handleSubmit = (event: React.FormEvent) => {\n        event.preventDefault();\n        if (!props.servico) {\n            console.warn(\"Nenhum serviço selecionado para atualização.\");\n            return;\n        }\n\n        const valorNumerico = parseFloat(valor);\n\n        if (!nome || isNaN(valorNumerico) || valorNumerico < 0) {\n            alert(\"Por favor, preencha o nome e um valor numérico válido para o serviço.\");\n            return;\n        }\n\n        props.atualizarServico(props.servico.getNome, nome, valorNumerico, descricao);\n        props.atualizarDados();\n\n        props.seletorView('Serviços', event);\n    };\n\n    const { tema, seletorView, servico } = props;\n\n    if (!servico) {\n        return (\n            <div className=\"container-fluid\">\n                <h2>Atualizar Serviço</h2>\n                <p className=\"alert alert-warning\">Nenhum serviço selecionado para atualização. Por favor, volte para a lista de serviços e selecione um.</p>\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={(e) => seletorView('Serviços', e)}>Voltar</button>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"container-fluid\">\n            <h2>Atualizar Serviço: {servico.getNome}</h2>\n            <form onSubmit={handleSubmit}>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"nome\" className=\"form-label\">Nome do Serviço</label>\n                    <input type=\"text\" className=\"form-control\" id=\"nome\" name=\"nome\" value={nome} onChange={handleChange} required />\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"valor\" className=\"form-label\">Valor (R$)</label>\n                    <input type=\"number\" step=\"0.01\" className=\"form-control\" id=\"valor\" name=\"valor\" value={valor} onChange={handleChange} required />\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"descricao\" className=\"form-label\">Descrição</label>\n                    <textarea className=\"form-control\" id=\"descricao\" name=\"descricao\" value={descricao} onChange={handleChange} rows={3}></textarea>\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary me-2\">Atualizar</button>\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={(e) => seletorView('Serviços', e)}>Cancelar</button>\n            </form>\n        </div>\n    );\n}\n","/home/ramonads/3/atviii/src/componentes/servicos/ConfirmacaoExclusaoServico.tsx",["219"],[],"import React from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Servico from '../../modelo/servico';\n\ntype Props = {\n    tema: string;\n    seletorView: (novaTela: string, evento?: React.MouseEvent | React.FormEvent) => void;\n    servico: Servico; \n    excluirServico: (nomeServico: string) => void; \n    atualizarDados: () => void; \n};\n\nexport default function ConfirmacaoExclusaoServico(props: Props) {\n    const handleExcluir = (event: React.MouseEvent) => {\n        event.preventDefault();\n        if (!props.servico) {\n            console.warn(\"Nenhum serviço selecionado para exclusão.\");\n            return;\n        }\n\n        const nomeServico = props.servico.getNome;\n\n        props.excluirServico(nomeServico);\n\n        props.atualizarDados();\n\n        props.seletorView('Serviços', event); \n    };\n\n    const { tema, seletorView, servico } = props;\n\n    if (!servico) {\n        return (\n            <div className=\"container-fluid\">\n                <h2>Excluir Serviço</h2>\n                <p className=\"alert alert-warning\">Nenhum serviço selecionado para exclusão. Por favor, volte para a lista de serviços e selecione um.</p>\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={(e) => seletorView('Serviços', e)}>Voltar</button>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"container-fluid\">\n            <h2>Confirmar Exclusão de Serviço</h2>\n            <div className=\"alert alert-warning\" role=\"alert\">\n                Você tem certeza que deseja excluir o serviço: <strong>{servico.getNome}</strong> (Valor: R$ {servico.getValor.toFixed(2)}, Descrição: {servico.getDescricao})?\n            </div>\n            <button\n                type=\"button\"\n                className=\"btn btn-danger me-2\"\n                onClick={handleExcluir}\n            >\n                Sim, Excluir\n            </button>\n            <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                onClick={(e) => seletorView('Serviços', e)}\n            >\n                Cancelar\n            </button>\n        </div>\n    );\n}\n","/home/ramonads/3/atviii/src/componentes/relatorios/RegistroConsumo.tsx",["220","221"],[],"import React, { useState } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Cliente from '../../modelo/cliente';\nimport Produto from '../../modelo/produto';\nimport Servico from '../../modelo/servico';\n\ntype ClienteData = Cliente;\ntype ProdutoData = Produto;\ntype ServicoData = Servico;\n\ntype Props = {\n    tema: string;\n    seletorView: (novaTela: string, evento?: React.MouseEvent | React.FormEvent) => void;\n    clientes: ClienteData[];\n    produtos: ProdutoData[];\n    servicos: ServicoData[];\n    registrarConsumo: (cpfCliente: string, nomeItem: string, tipoItem: 'produto' | 'servico') => void;\n    atualizarDados: () => void;\n};\n\nexport default function RegistroConsumo(props: Props) {\n    const [clienteSelecionadoCpf, setClienteSelecionadoCpf] = useState<string>('');\n    const [itemTipo, setItemTipo] = useState<'produto' | 'servico' | ''>('');\n    const [itemId, setItemId] = useState<string | null>(null);\n    const [feedback, setFeedback] = useState<string>('');\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n        const { name, value } = event.target;\n        if (name === \"clienteSelecionadoCpf\") {\n            setClienteSelecionadoCpf(value);\n            setItemTipo('');\n            setItemId(null); \n        } else if (name === \"itemTipo\") {\n            setItemTipo(value as 'produto' | 'servico' | '');\n            setItemId(null);\n        } else if (name === \"itemId\") {\n            setItemId(value);\n        }\n    };\n\n    const handleSelectCliente = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setClienteSelecionadoCpf(event.target.value);\n        setItemTipo(''); \n        setItemId(null); \n        setFeedback(''); \n    };\n\n    const handleSelectTipoItem = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setItemTipo(event.target.value as 'produto' | 'servico' | '');\n        setItemId(null); \n        setFeedback(''); \n    };\n\n    const handleSelectItem = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setItemId(event.target.value);\n        setFeedback(''); \n    };\n\n    const handleSubmit = (event: React.FormEvent) => {\n        event.preventDefault();\n        setFeedback(''); \n\n        if (!clienteSelecionadoCpf || !itemTipo || !itemId) {\n            setFeedback('Por favor, selecione um cliente, tipo de item e o item.');\n            return;\n        }\n\n        props.registrarConsumo(clienteSelecionadoCpf, itemId, itemTipo);\n        props.atualizarDados();\n        setFeedback(`Consumo de ${itemId} (${itemTipo}) registrado para o cliente com CPF: ${clienteSelecionadoCpf} com sucesso!`);\n\n        setClienteSelecionadoCpf('');\n        setItemTipo('');\n        setItemId(null);\n    };\n\n    const { tema, seletorView, clientes, produtos, servicos } = props;\n\n    const itensDisponiveis = itemTipo === 'produto' ? produtos : itemTipo === 'servico' ? servicos : [];\n\n    return (\n        <div className=\"container-fluid\">\n            <h2>Registro de Consumo</h2>\n            <form onSubmit={handleSubmit}>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"clienteSelecionadoCpf\" className=\"form-label\">Cliente</label>\n                    <select\n                        className=\"form-select\"\n                        id=\"clienteSelecionadoCpf\"\n                        name=\"clienteSelecionadoCpf\"\n                        value={clienteSelecionadoCpf}\n                        onChange={handleSelectCliente}\n                        required\n                    >\n                        <option value=\"\">Selecione um cliente...</option>\n                        {clientes.map(cliente => (\n                            <option key={cliente.getCpf.getValor} value={cliente.getCpf.getValor}>\n                                {cliente.nome} ({cliente.getCpf.getValor})\n                            </option>\n                        ))}\n                    </select>\n                </div>\n\n                {clienteSelecionadoCpf && (\n                    <>\n                        <div className=\"mb-3\">\n                            <label htmlFor=\"itemTipo\" className=\"form-label\">Tipo de Item</label>\n                            <select\n                                className=\"form-select\"\n                                id=\"itemTipo\"\n                                name=\"itemTipo\"\n                                value={itemTipo}\n                                onChange={handleSelectTipoItem}\n                                required\n                            >\n                                <option value=\"\">Selecione o tipo...</option>\n                                <option value=\"produto\">Produto</option>\n                                <option value=\"servico\">Serviço</option>\n                            </select>\n                        </div>\n\n                        {itemTipo && (\n                            <div className=\"mb-3\">\n                                <label htmlFor=\"itemId\" className=\"form-label\">Item</label>\n                                <select\n                                    className=\"form-select\"\n                                    id=\"itemId\"\n                                    name=\"itemId\"\n                                    value={itemId || ''}\n                                    onChange={handleSelectItem}\n                                    required\n                                >\n                                    <option value=\"\">Selecione o item...</option>\n                                    {itensDisponiveis.map(item => (\n                                        <option key={item.getNome} value={item.getNome}>\n                                            {item.getNome} (R$ {item.getValor.toFixed(2)})\n                                        </option>\n                                    ))}\n                                </select>\n                            </div>\n                        )}\n                    </>\n                )}\n\n                {feedback && (\n                    <div className={`alert ${feedback.includes('sucesso') ? 'alert-success' : 'alert-danger'} mt-3`} role=\"alert\">\n                        {feedback}\n                    </div>\n                )}\n\n                <button type=\"submit\" className=\"btn btn-success me-2\" disabled={!clienteSelecionadoCpf || !itemTipo || !itemId}>Registrar Consumo</button>\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={(e) => seletorView('Clientes', e)}>Voltar ao Menu</button>\n            </form>\n        </div>\n    );\n}\n","/home/ramonads/3/atviii/src/componentes/relatorios/RelatorioClientesMaisConsumiram.tsx",["222","223"],[],"import React, { useState, useEffect } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\ntype Props = {\n    tema: string;\n    seletorView: (novaTela: string, evento?: React.MouseEvent | React.FormEvent) => void;\n    getRelatorio: () => { posicao: number, cliente: string, quantidadeProdutos: number, quantidadeServicos: number, total: number }[];\n};\n\ntype RelatorioItem = {\n    posicao: number;\n    cliente: string;\n    quantidadeProdutos: number;\n    quantidadeServicos: number;\n    total: number;\n};\n\nexport default function RelatorioClientesMaisConsumiram(props: Props) {\n    const [relatorio, setRelatorio] = useState<RelatorioItem[]>([]);\n\n    const carregarRelatorio = () => {\n        const dadosRelatorio = props.getRelatorio();\n        setRelatorio(dadosRelatorio);\n    };\n\n    useEffect(() => {\n        carregarRelatorio();\n    }, [props.getRelatorio]);\n\n    const { tema, seletorView } = props;\n\n    return (\n        <div className=\"container-fluid\">\n            <h2>Top 10 Clientes que Mais Consumiram (Quantidade)</h2>\n            {relatorio.length > 0 && relatorio.some(item => item.total > 0) ? (\n                <table className=\"table table-striped\">\n                    <thead>\n                        <tr>\n                            <th>Posição</th>\n                            <th>Cliente</th>\n                            <th>Produtos</th>\n                            <th>Serviços</th>\n                            <th>Total Consumido</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {relatorio.filter(item => item.total > 0).map((item) => (\n                            <tr key={item.posicao}>\n                                <td>{item.posicao}</td>\n                                <td>{item.cliente}</td>\n                                <td>{item.quantidadeProdutos}</td>\n                                <td>{item.quantidadeServicos}</td>\n                                <td>{item.total}</td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            ) : (\n                <p className=\"alert alert-info\">Nenhum consumo registrado ou clientes com consumo zero.</p>\n            )}\n            <button type=\"button\" className=\"btn btn-secondary mt-3\" onClick={(e) => seletorView('Relatórios', e)}>\n                Voltar aos Relatórios\n            </button>\n        </div>\n    );\n}","/home/ramonads/3/atviii/src/componentes/relatorios/RelatorioProdutosServicosMaisConsumidos.tsx",["224","225"],[],"import React, { useState, useEffect } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\ntype Props = {\n    tema: string;\n    seletorView: (novaTela: string, evento?: React.MouseEvent | React.FormEvent) => void;\n    getRelatorio: () => { nome: string, tipo: 'Produto' | 'Serviço', quantidade: number }[];\n};\n\ntype RelatorioItem = {\n    nome: string;\n    tipo: 'Produto' | 'Serviço';\n    quantidade: number;\n};\n\nexport default function RelatorioProdutosServicosMaisConsumidos(props: Props) {\n    const [relatorio, setRelatorio] = useState<RelatorioItem[]>([]);\n\n    const carregarRelatorio = () => {\n        const dadosRelatorio = props.getRelatorio();\n        setRelatorio(dadosRelatorio);\n    };\n\n    useEffect(() => {\n        carregarRelatorio();\n    }, [props.getRelatorio]);\n\n    const { tema, seletorView } = props;\n\n    return (\n        <div className=\"container-fluid\">\n            <h2>Produtos e Serviços Mais Consumidos (Geral)</h2>\n            {relatorio.length > 0 ? (\n                <table className=\"table table-striped\">\n                    <thead>\n                        <tr>\n                            <th>Tipo</th>\n                            <th>Nome</th>\n                            <th>Quantidade Total</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {relatorio.map((item, index) => (\n                            <tr key={index}> \n                                <td>{item.tipo}</td>\n                                <td>{item.nome}</td>\n                                <td>{item.quantidade}</td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            ) : (\n                <p className=\"alert alert-info\">Nenhum produto ou serviço consumido.</p>\n            )}\n            <button type=\"button\" className=\"btn btn-secondary mt-3\" onClick={(e) => seletorView('Relatórios', e)}>\n                Voltar aos Relatórios\n            </button>\n        </div>\n    );\n}\n","/home/ramonads/3/atviii/src/componentes/relatorios/RelatorioConsumoPorTipoRaca.tsx",["226","227"],[],"import React, { useState, useEffect } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\ntype Props = {\n    tema: string;\n    seletorView: (novaTela: string, evento?: React.MouseEvent | React.FormEvent) => void;\n    getRelatorio: () => { tipoRaca: string, nome: string, tipo: 'Produto' | 'Serviço', quantidade: number }[];\n};\n\ntype RelatorioItem = {\n    tipoRaca: string;\n    nome: string;\n    tipo: 'Produto' | 'Serviço';\n    quantidade: number;\n};\n\nexport default function RelatorioConsumoPorTipoRaca(props: Props) {\n    const [relatorio, setRelatorio] = useState<RelatorioItem[]>([]);\n\n    const carregarRelatorio = () => {\n        const dadosRelatorio = props.getRelatorio();\n        setRelatorio(dadosRelatorio);\n    };\n\n    useEffect(() => {\n        carregarRelatorio();\n    }, [props.getRelatorio]);\n\n    const { tema, seletorView } = props;\n\n    const groupedReports: { [key: string]: RelatorioItem[] } = {};\n    relatorio.forEach(item => {\n        const groupKey = item.tipoRaca && item.tipoRaca.trim() !== '' ? item.tipoRaca : \"NÃO ESPECIFICADO\";\n        if (!groupedReports[groupKey]) {\n            groupedReports[groupKey] = [];\n        }\n        groupedReports[groupKey].push(item);\n    });\n\n    const sortedKeys = Object.keys(groupedReports).sort();\n\n    return (\n        <div className=\"container-fluid\">\n            <h2>Serviços e Produtos Mais Consumidos por Raça</h2>\n            {Object.keys(groupedReports).length > 0 ? (\n                sortedKeys.map(tipoRacaKey => (\n                    <div key={tipoRacaKey} className=\"mb-4\">\n                        <h3>--- {tipoRacaKey} ---</h3>\n                        <table className=\"table table-striped\">\n                            <thead>\n                                <tr>\n                                    <th>Tipo Item</th>\n                                    <th>Nome Item</th>\n                                    <th>Quantidade</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {groupedReports[tipoRacaKey].map((item, index) => (\n                                    <tr key={index}>\n                                        <td>{item.tipo}</td>\n                                        <td>{item.nome}</td>\n                                        <td>{item.quantidade}</td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    </div>\n                ))\n            ) : (\n                <p className=\"alert alert-info\">Nenhum consumo registrado por tipo e raça de pets.</p>\n            )}\n            <button type=\"button\" className=\"btn btn-secondary mt-3\" onClick={(e) => seletorView('Relatórios', e)}>\n                Voltar aos Relatórios\n            </button>\n        </div>\n    );\n}","/home/ramonads/3/atviii/src/componentes/relatorios/RelatorioClientesMaisGastaram.tsx",["228","229"],[],"import React, { useState, useEffect } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\ntype Props = {\n    tema: string;\n    seletorView: (novaTela: string, evento?: React.MouseEvent | React.FormEvent) => void;\n    getRelatorio: () => { posicao: number, cliente: string, valorTotal: number }[];\n};\n\ntype RelatorioItem = {\n    posicao: number;\n    cliente: string;\n    valorTotal: number;\n};\n\nexport default function RelatorioClientesMaisGastaram(props: Props) {\n    const [relatorio, setRelatorio] = useState<RelatorioItem[]>([]);\n\n    const carregarRelatorio = () => {\n        const dadosRelatorio = props.getRelatorio();\n        setRelatorio(dadosRelatorio);\n    };\n\n    useEffect(() => {\n        carregarRelatorio();\n    }, [props.getRelatorio]);\n\n    const { tema, seletorView } = props;\n\n    return (\n        <div className=\"container-fluid\">\n            <h2>Top 5 Clientes que Mais Gastaram (Valor)</h2>\n            {relatorio.length > 0 && relatorio.some(item => item.valorTotal > 0) ? (\n                <table className=\"table table-striped\">\n                    <thead>\n                        <tr>\n                            <th>Posição</th>\n                            <th>Cliente</th>\n                            <th>Valor Total Gasto</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {relatorio.filter(item => item.valorTotal > 0).map((item, index) => (\n                            <tr key={item.posicao}>\n                                <td>{item.posicao}</td>\n                                <td>{item.cliente}</td>\n                                <td>R$ {item.valorTotal.toFixed(2)}</td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            ) : (\n                <p className=\"alert alert-info\">Nenhum consumo registrado ou clientes com gasto zero.</p>\n            )}\n            <button type=\"button\" className=\"btn btn-secondary mt-3\" onClick={(e) => seletorView('Relatórios', e)}>\n                Voltar aos Relatórios\n            </button>\n        </div>\n    );\n}\n","/home/ramonads/3/atviii/src/componentes/relatorios/RelatorioConsumoPorTipo.tsx",["230","231"],[],"import React, { useState, useEffect } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\ntype Props = {\n    tema: string;\n    seletorView: (novaTela: string, evento?: React.MouseEvent | React.FormEvent) => void;\n    getRelatorio: () => { tipoPet: string, nomeItem: string, tipoItem: 'Produto' | 'Serviço', quantidade: number }[];\n};\n\ntype RelatorioItem = {\n    tipoPet: string;\n    nomeItem: string;\n    tipoItem: 'Produto' | 'Serviço';\n    quantidade: number;\n};\n\nexport default function RelatorioConsumoPorTipo(props: Props) {\n    const [relatorio, setRelatorio] = useState<RelatorioItem[]>([]);\n\n    const carregarRelatorio = () => {\n        const dadosRelatorio = props.getRelatorio();\n        setRelatorio(dadosRelatorio);\n    };\n\n    useEffect(() => {\n        carregarRelatorio();\n    }, [props.getRelatorio]);\n\n    const { tema, seletorView } = props;\n\n    const groupedReports: { [key: string]: RelatorioItem[] } = {};\n    relatorio.forEach(item => {\n        const groupKey = item.tipoPet && item.tipoPet.trim() !== '' ? item.tipoPet : \"NÃO ESPECIFICADO\";\n        if (!groupedReports[groupKey]) {\n            groupedReports[groupKey] = [];\n        }\n        groupedReports[groupKey].push(item);\n    });\n\n    const sortedKeys = Object.keys(groupedReports).sort();\n\n    return (\n        <div className=\"container-fluid\">\n            <h2>Serviços e Produtos Mais Consumidos por Tipo de Pet</h2>\n            {Object.keys(groupedReports).length > 0 ? (\n                sortedKeys.map(tipoPetKey => (\n                    <div key={tipoPetKey} className=\"mb-4\">\n                        <h3>--- {tipoPetKey.toUpperCase()} ---</h3>\n                        <table className=\"table table-striped\">\n                            <thead>\n                                <tr>\n                                    <th>Tipo Item</th>\n                                    <th>Nome Item</th>\n                                    <th>Quantidade</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {groupedReports[tipoPetKey].map((item, index) => (\n                                    <tr key={index}>\n                                        <td>{item.tipoItem}</td>\n                                        <td>{item.nomeItem}</td>\n                                        <td>{item.quantidade}</td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    </div>\n                ))\n            ) : (\n                <p className=\"alert alert-info\">Nenhum consumo registrado por tipo de pet.</p>\n            )}\n            <button type=\"button\" className=\"btn btn-secondary mt-3\" onClick={(e) => seletorView('Relatórios', e)}>\n                Voltar aos Relatórios\n            </button>\n        </div>\n    );\n}\n","/home/ramonads/3/atviii/src/modelo/empresa.ts",[],[],"/home/ramonads/3/atviii/src/modelo/cliente.ts",[],[],"/home/ramonads/3/atviii/src/modelo/produto.ts",[],[],"/home/ramonads/3/atviii/src/modelo/servico.ts",[],[],"/home/ramonads/3/atviii/src/modelo/pet.ts",[],[],"/home/ramonads/3/atviii/src/modelo/cpf.ts",[],[],{"ruleId":"232","severity":1,"message":"233","line":19,"column":21,"nodeType":"234","endLine":19,"endColumn":99},{"ruleId":"235","severity":1,"message":"236","line":7,"column":8,"nodeType":"237","messageId":"238","endLine":7,"endColumn":10},{"ruleId":"235","severity":1,"message":"239","line":8,"column":8,"nodeType":"237","messageId":"238","endLine":8,"endColumn":16},{"ruleId":"240","severity":1,"message":"241","line":59,"column":21,"nodeType":"242","messageId":"243","endLine":59,"endColumn":46},{"ruleId":"240","severity":1,"message":"241","line":60,"column":21,"nodeType":"242","messageId":"243","endLine":60,"endColumn":46},{"ruleId":"240","severity":1,"message":"241","line":61,"column":21,"nodeType":"242","messageId":"243","endLine":61,"endColumn":46},{"ruleId":"235","severity":1,"message":"244","line":14,"column":13,"nodeType":"237","messageId":"238","endLine":14,"endColumn":17},{"ruleId":"235","severity":1,"message":"244","line":46,"column":13,"nodeType":"237","messageId":"238","endLine":46,"endColumn":17},{"ruleId":"235","severity":1,"message":"245","line":3,"column":8,"nodeType":"237","messageId":"238","endLine":3,"endColumn":15},{"ruleId":"235","severity":1,"message":"244","line":40,"column":13,"nodeType":"237","messageId":"238","endLine":40,"endColumn":17},{"ruleId":"235","severity":1,"message":"246","line":22,"column":15,"nodeType":"237","messageId":"238","endLine":22,"endColumn":26},{"ruleId":"235","severity":1,"message":"244","line":30,"column":13,"nodeType":"237","messageId":"238","endLine":30,"endColumn":17},{"ruleId":"235","severity":1,"message":"244","line":44,"column":13,"nodeType":"237","messageId":"238","endLine":44,"endColumn":17},{"ruleId":"235","severity":1,"message":"247","line":3,"column":8,"nodeType":"237","messageId":"238","endLine":3,"endColumn":11},{"ruleId":"235","severity":1,"message":"244","line":58,"column":13,"nodeType":"237","messageId":"238","endLine":58,"endColumn":17},{"ruleId":"235","severity":1,"message":"247","line":3,"column":8,"nodeType":"237","messageId":"238","endLine":3,"endColumn":11},{"ruleId":"235","severity":1,"message":"244","line":36,"column":13,"nodeType":"237","messageId":"238","endLine":36,"endColumn":17},{"ruleId":"235","severity":1,"message":"245","line":3,"column":8,"nodeType":"237","messageId":"238","endLine":3,"endColumn":15},{"ruleId":"235","severity":1,"message":"244","line":22,"column":13,"nodeType":"237","messageId":"238","endLine":22,"endColumn":17},{"ruleId":"235","severity":1,"message":"244","line":14,"column":13,"nodeType":"237","messageId":"238","endLine":14,"endColumn":17},{"ruleId":"235","severity":1,"message":"244","line":38,"column":13,"nodeType":"237","messageId":"238","endLine":38,"endColumn":17},{"ruleId":"235","severity":1,"message":"248","line":13,"column":6,"nodeType":"237","messageId":"238","endLine":13,"endColumn":11},{"ruleId":"235","severity":1,"message":"244","line":59,"column":13,"nodeType":"237","messageId":"238","endLine":59,"endColumn":17},{"ruleId":"235","severity":1,"message":"244","line":28,"column":13,"nodeType":"237","messageId":"238","endLine":28,"endColumn":17},{"ruleId":"235","severity":1,"message":"244","line":38,"column":13,"nodeType":"237","messageId":"238","endLine":38,"endColumn":17},{"ruleId":"235","severity":1,"message":"244","line":14,"column":13,"nodeType":"237","messageId":"238","endLine":14,"endColumn":17},{"ruleId":"235","severity":1,"message":"248","line":13,"column":6,"nodeType":"237","messageId":"238","endLine":13,"endColumn":11},{"ruleId":"235","severity":1,"message":"244","line":59,"column":13,"nodeType":"237","messageId":"238","endLine":59,"endColumn":17},{"ruleId":"235","severity":1,"message":"244","line":30,"column":13,"nodeType":"237","messageId":"238","endLine":30,"endColumn":17},{"ruleId":"235","severity":1,"message":"249","line":27,"column":11,"nodeType":"237","messageId":"238","endLine":27,"endColumn":23},{"ruleId":"235","severity":1,"message":"244","line":77,"column":13,"nodeType":"237","messageId":"238","endLine":77,"endColumn":17},{"ruleId":"250","severity":1,"message":"251","line":28,"column":8,"nodeType":"252","endLine":28,"endColumn":28,"suggestions":"253"},{"ruleId":"235","severity":1,"message":"244","line":30,"column":13,"nodeType":"237","messageId":"238","endLine":30,"endColumn":17},{"ruleId":"250","severity":1,"message":"251","line":26,"column":8,"nodeType":"252","endLine":26,"endColumn":28,"suggestions":"254"},{"ruleId":"235","severity":1,"message":"244","line":28,"column":13,"nodeType":"237","messageId":"238","endLine":28,"endColumn":17},{"ruleId":"250","severity":1,"message":"251","line":27,"column":8,"nodeType":"252","endLine":27,"endColumn":28,"suggestions":"255"},{"ruleId":"235","severity":1,"message":"244","line":29,"column":13,"nodeType":"237","messageId":"238","endLine":29,"endColumn":17},{"ruleId":"250","severity":1,"message":"251","line":26,"column":8,"nodeType":"252","endLine":26,"endColumn":28,"suggestions":"256"},{"ruleId":"235","severity":1,"message":"244","line":28,"column":13,"nodeType":"237","messageId":"238","endLine":28,"endColumn":17},{"ruleId":"250","severity":1,"message":"251","line":27,"column":8,"nodeType":"252","endLine":27,"endColumn":28,"suggestions":"257"},{"ruleId":"235","severity":1,"message":"244","line":29,"column":13,"nodeType":"237","messageId":"238","endLine":29,"endColumn":17},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","@typescript-eslint/no-unused-vars","'RG' is defined but never used.","Identifier","unusedVar","'Telefone' is defined but never used.","no-new-wrappers","Do not use Number as a constructor.","NewExpression","noConstructor","'tema' is assigned a value but never used.","'Cliente' is defined but never used.","'nomeCliente' is assigned a value but never used.","'Pet' is defined but never used.","'State' is defined but never used.","'handleChange' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'carregarRelatorio'. Either include it or remove the dependency array.","ArrayExpression",["258"],["259"],["260"],["261"],["262"],{"desc":"263","fix":"264"},{"desc":"263","fix":"265"},{"desc":"263","fix":"266"},{"desc":"263","fix":"267"},{"desc":"263","fix":"268"},"Update the dependencies array to be: [carregarRelatorio, props.getRelatorio]",{"range":"269","text":"270"},{"range":"271","text":"270"},{"range":"272","text":"270"},{"range":"273","text":"270"},{"range":"274","text":"270"},[851,871],"[carregarRelatorio, props.getRelatorio]",[767,787],[795,815],[739,759],[805,825]]